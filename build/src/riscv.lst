GAS LISTING /tmp/ccEFFpD9.s 			page 1


   1              		.file	"riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv10popSPPSPIEEv
   9              	_ZN5Riscv10popSPPSPIEEv:
  10              	.LFB30:
  11              		.file 1 "src/riscv.cpp"
   1:src/riscv.cpp **** //
   2:src/riscv.cpp **** // Created by os on 8/18/24.
   3:src/riscv.cpp **** //
   4:src/riscv.cpp **** 
   5:src/riscv.cpp **** #include "../h/riscv.hpp"
   6:src/riscv.cpp **** #include "../lib/console.h"
   7:src/riscv.cpp **** #include "../lib/mem.h"
   8:src/riscv.cpp **** #include "../h/MemoryAllocator.h"
   9:src/riscv.cpp **** #include "../h/syscall_c.hpp"
  10:src/riscv.cpp **** #include "../h/tcb.hpp"
  11:src/riscv.cpp **** #include "../h/semaphore.hpp"
  12:src/riscv.cpp **** 
  13:src/riscv.cpp **** void Riscv::popSPPSPIE() {
  12              		.loc 1 13 26
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  14:src/riscv.cpp ****     maskClearSSTATUS(SSTATUS_SPP);
  20              		.loc 1 14 5
  21              	.LVL0:
  22              	.LBB36:
  23              	.LBB37:
  24              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** //
   2:src/../h/riscv.hpp **** // Created by os on 8/18/24.
   3:src/../h/riscv.hpp **** //
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #ifndef PROJECT_BASE_RISCV_HPP
   6:src/../h/riscv.hpp **** #define PROJECT_BASE_RISCV_HPP
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/riscv.hpp **** 
  10:src/../h/riscv.hpp **** class Riscv {
  11:src/../h/riscv.hpp **** 
  12:src/../h/riscv.hpp **** public:
  13:src/../h/riscv.hpp **** 
  14:src/../h/riscv.hpp ****     static void popSPPSPIE();
  15:src/../h/riscv.hpp **** 
  16:src/../h/riscv.hpp ****     static void pushAllRegs();
  17:src/../h/riscv.hpp ****     static void popAllRegs();
  18:src/../h/riscv.hpp **** 
  19:src/../h/riscv.hpp ****     static uint64 readSCAUSE();
  20:src/../h/riscv.hpp ****     static void writeSCAUSE(uint64 scause);
GAS LISTING /tmp/ccEFFpD9.s 			page 2


  21:src/../h/riscv.hpp **** 
  22:src/../h/riscv.hpp ****     static uint64 readSEPC();
  23:src/../h/riscv.hpp ****     static void writeSEPC(uint64 sepc);
  24:src/../h/riscv.hpp **** 
  25:src/../h/riscv.hpp ****     static void writeSTVEC(uint64 stvec);
  26:src/../h/riscv.hpp **** 
  27:src/../h/riscv.hpp ****     static constexpr uint64 SIP_SSIE = (1 << 1);
  28:src/../h/riscv.hpp ****     static constexpr uint64 SIP_STIE = (1 << 5);
  29:src/../h/riscv.hpp ****     static constexpr uint64 SIP_SEIE = (1 << 9);
  30:src/../h/riscv.hpp **** 
  31:src/../h/riscv.hpp ****     static void maskSetSIP(uint64 mask);
  32:src/../h/riscv.hpp ****     static void maskClearSIP(uint64 mask);
  33:src/../h/riscv.hpp ****     static uint64 readSIP ();
  34:src/../h/riscv.hpp ****     static void writeSIP (uint64 sip);
  35:src/../h/riscv.hpp **** 
  36:src/../h/riscv.hpp ****     static constexpr uint64 SSTATUS_SIE = (1 << 1);
  37:src/../h/riscv.hpp ****     static constexpr uint64 SSTATUS_SPIE = (1 << 5);
  38:src/../h/riscv.hpp ****     static constexpr uint64 SSTATUS_SPP = (1 << 8);
  39:src/../h/riscv.hpp **** 
  40:src/../h/riscv.hpp ****     static void maskSetSSTATUS(uint64 mask);
  41:src/../h/riscv.hpp ****     static void maskClearSSTATUS(uint64 mask);
  42:src/../h/riscv.hpp ****     static uint64 readSSTATUS ();
  43:src/../h/riscv.hpp ****     static void writeSSTATUS (uint64 sstatus);
  44:src/../h/riscv.hpp **** 
  45:src/../h/riscv.hpp ****     static void supervisorTrap();
  46:src/../h/riscv.hpp **** 
  47:src/../h/riscv.hpp **** private:
  48:src/../h/riscv.hpp **** 
  49:src/../h/riscv.hpp ****     static void handleSupervisorTrap();
  50:src/../h/riscv.hpp **** };
  51:src/../h/riscv.hpp **** 
  52:src/../h/riscv.hpp **** inline uint64 Riscv::readSCAUSE() {
  53:src/../h/riscv.hpp ****     uint64 volatile scause;
  54:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
  55:src/../h/riscv.hpp ****     return scause;
  56:src/../h/riscv.hpp **** }
  57:src/../h/riscv.hpp **** 
  58:src/../h/riscv.hpp **** inline void Riscv::writeSCAUSE(uint64 scause) {
  59:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
  60:src/../h/riscv.hpp **** }
  61:src/../h/riscv.hpp **** 
  62:src/../h/riscv.hpp **** inline uint64 Riscv::readSEPC() {
  63:src/../h/riscv.hpp ****     uint64 volatile sepc;
  64:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
  65:src/../h/riscv.hpp ****     return sepc;
  66:src/../h/riscv.hpp **** }
  67:src/../h/riscv.hpp **** 
  68:src/../h/riscv.hpp **** inline void Riscv::writeSEPC(uint64 sepc) {
  69:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
  70:src/../h/riscv.hpp **** }
  71:src/../h/riscv.hpp **** 
  72:src/../h/riscv.hpp **** inline void Riscv::writeSTVEC(uint64 stvec) {
  73:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
  74:src/../h/riscv.hpp **** }
  75:src/../h/riscv.hpp **** 
  76:src/../h/riscv.hpp **** inline void Riscv::maskSetSIP(uint64 mask) {
  77:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
GAS LISTING /tmp/ccEFFpD9.s 			page 3


  78:src/../h/riscv.hpp **** }
  79:src/../h/riscv.hpp **** 
  80:src/../h/riscv.hpp **** inline void Riscv::maskClearSIP(uint64 mask) {
  81:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
  82:src/../h/riscv.hpp **** }
  83:src/../h/riscv.hpp **** 
  84:src/../h/riscv.hpp **** inline uint64 Riscv::readSIP() {
  85:src/../h/riscv.hpp ****     uint64 volatile sip;
  86:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
  87:src/../h/riscv.hpp ****     return sip;
  88:src/../h/riscv.hpp **** }
  89:src/../h/riscv.hpp **** 
  90:src/../h/riscv.hpp **** inline void Riscv::writeSIP(uint64 sip) {
  91:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
  92:src/../h/riscv.hpp **** }
  93:src/../h/riscv.hpp **** 
  94:src/../h/riscv.hpp **** inline void Riscv::maskSetSSTATUS(uint64 mask) {
  95:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
  96:src/../h/riscv.hpp **** }
  97:src/../h/riscv.hpp **** 
  98:src/../h/riscv.hpp **** inline void Riscv::maskClearSSTATUS(uint64 mask) {
  99:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
  25              		.loc 2 99 5
  26              		.loc 2 99 68 is_stmt 0
  27 000c 93070010 		li	a5,256
  28              	#APP
  29              	# 99 "src/../h/riscv.hpp" 1
 100              	}
  30              		csrc sstatus, a5
  31              	# 0 "" 2
  32              	.LVL1:
  33              	#NO_APP
  34              	.LBE37:
  35              	.LBE36:
  15:src/riscv.cpp ****     __asm__ volatile("csrw sepc, ra");
  36              		.loc 1 15 5 is_stmt 1
  37              		.loc 1 15 38 is_stmt 0
  38              	#APP
  39              	# 15 "src/riscv.cpp" 1
  16              	    __asm__ volatile("sret");
  40              		csrw sepc, ra
  41              	# 0 "" 2
  42              		.loc 1 16 5 is_stmt 1
  43              		.loc 1 16 29 is_stmt 0
  44              	# 16 "src/riscv.cpp" 1
  17              	}
  45              		sret
  46              	# 0 "" 2
  47              		.loc 1 17 1
  48              	#NO_APP
  49 001c 03348100 		ld	s0,8(sp)
  50              		.cfi_restore 8
  51              		.cfi_def_cfa 2, 16
  52 0020 13010101 		addi	sp,sp,16
  53              		.cfi_def_cfa_offset 0
  54 0024 67800000 		jr	ra
  55              		.cfi_endproc
GAS LISTING /tmp/ccEFFpD9.s 			page 4


  56              	.LFE30:
  58              		.align	2
  59              		.globl	_ZN5Riscv20handleSupervisorTrapEv
  61              	_ZN5Riscv20handleSupervisorTrapEv:
  62              	.LFB31:
  18:src/riscv.cpp **** 
  19:src/riscv.cpp **** void Riscv::handleSupervisorTrap() {
  63              		.loc 1 19 36 is_stmt 1
  64              		.cfi_startproc
  65 0028 130101FB 		addi	sp,sp,-80
  66              		.cfi_def_cfa_offset 80
  67 002c 23341104 		sd	ra,72(sp)
  68 0030 23308104 		sd	s0,64(sp)
  69 0034 233C9102 		sd	s1,56(sp)
  70              		.cfi_offset 1, -8
  71              		.cfi_offset 8, -16
  72              		.cfi_offset 9, -24
  73 0038 13040105 		addi	s0,sp,80
  74              		.cfi_def_cfa 8, 0
  20:src/riscv.cpp ****     uint64 scause = readSCAUSE();
  75              		.loc 1 20 5
  76              	.LBB38:
  77              	.LBB39:
  53:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
  78              		.loc 2 53 5
  54:src/../h/riscv.hpp ****     return scause;
  79              		.loc 2 54 5
  54:src/../h/riscv.hpp ****     return scause;
  80              		.loc 2 54 72 is_stmt 0
  81              	#APP
  82              	# 54 "src/../h/riscv.hpp" 1
  83              		csrr a5, scause
  84              	# 0 "" 2
  85              	#NO_APP
  86 0040 2334F4FC 		sd	a5,-56(s0)
  55:src/../h/riscv.hpp **** }
  87              		.loc 2 55 5 is_stmt 1
  55:src/../h/riscv.hpp **** }
  88              		.loc 2 55 12 is_stmt 0
  89 0044 033584FC 		ld	a0,-56(s0)
  90              	.LVL2:
  91              	.LBE39:
  92              	.LBE38:
  21:src/riscv.cpp ****     if (scause == 0x0000000000000008ULL || scause == 0x0000000000000009ULL) //ecall iz user ili sup
  93              		.loc 1 21 5 is_stmt 1
  94              	.LBB40:
  95              		.loc 1 21 41 is_stmt 0
  96 0048 130785FF 		addi	a4,a0,-8
  97              		.loc 1 21 5
  98 004c 93071000 		li	a5,1
  99 0050 63F0E714 		bleu	a4,a5,.L23
 100              	.LBE40:
  22:src/riscv.cpp ****     {
  23:src/riscv.cpp **** 
  24:src/riscv.cpp ****         volatile uint64 sepc = readSEPC() + 4;
  25:src/riscv.cpp ****         volatile uint64 sstatus = readSSTATUS();
  26:src/riscv.cpp **** 
GAS LISTING /tmp/ccEFFpD9.s 			page 5


  27:src/riscv.cpp ****         uint64 ecallReason;
  28:src/riscv.cpp **** 
  29:src/riscv.cpp ****         __asm__ volatile ("ld %0, 10 * 8(fp)" : "=r" (ecallReason));
  30:src/riscv.cpp **** 
  31:src/riscv.cpp ****         switch (ecallReason) {
  32:src/riscv.cpp **** 
  33:src/riscv.cpp ****             case  SyscallC::MEMALLOC : {
  34:src/riscv.cpp ****                 uint64 size;
  35:src/riscv.cpp ****                 uint64 ptr;
  36:src/riscv.cpp ****                 __asm__ volatile ("ld %0, 11 * 8(fp)" : "=r"(size));
  37:src/riscv.cpp ****                 size = size * MEM_BLOCK_SIZE;
  38:src/riscv.cpp ****                 ptr = (uint64)MemoryAllocator::mem_alloc((size_t)size);
  39:src/riscv.cpp ****                 __asm__ volatile ("sd %0, 10 * 8(fp)" : : "r"(ptr));
  40:src/riscv.cpp ****                 break;
  41:src/riscv.cpp ****             }
  42:src/riscv.cpp **** 
  43:src/riscv.cpp ****             case  SyscallC::MEMFREE : {
  44:src/riscv.cpp ****                 uint64  ptr;
  45:src/riscv.cpp ****                 uint64 ret;
  46:src/riscv.cpp ****                 __asm__ volatile ("ld %0, 11 * 8(fp)" : "=r" (ptr));
  47:src/riscv.cpp ****                 ret = MemoryAllocator::mem_free((void*)ptr);
  48:src/riscv.cpp ****                 __asm__ volatile ("sd %0, 10 * 8(fp)" : : "r" (ret));
  49:src/riscv.cpp ****                 break;
  50:src/riscv.cpp ****             }
  51:src/riscv.cpp **** 
  52:src/riscv.cpp ****             case SyscallC::THREADCREATE : {
  53:src/riscv.cpp ****                 uint64 handle, start_routine, arg, stack_space;
  54:src/riscv.cpp ****                 uint64 ret = 0;
  55:src/riscv.cpp ****                 __asm__ volatile ("ld %0, 11 * 8(fp)" : "=r" (handle));
  56:src/riscv.cpp ****                 __asm__ volatile ("ld %0, 12 * 8(fp)" : "=r" (start_routine));
  57:src/riscv.cpp ****                 __asm__ volatile ("ld %0, 13 * 8(fp)" : "=r" (arg));
  58:src/riscv.cpp ****                 __asm__ volatile ("ld %0, 14 * 8(fp)" : "=r" (stack_space));
  59:src/riscv.cpp ****                 TCB* newThread = TCB::createThread((TCB::Body)start_routine, (void*)arg, (char*)sta
  60:src/riscv.cpp ****                 *((TCB**)handle) = newThread;
  61:src/riscv.cpp ****                 __asm__ volatile ("sd %0, 10 * 8(fp)" : : "r" (ret));
  62:src/riscv.cpp ****                 break;
  63:src/riscv.cpp ****             }
  64:src/riscv.cpp **** 
  65:src/riscv.cpp ****             case SyscallC::THREADEXIT : {
  66:src/riscv.cpp ****                 uint64 ret = 0;
  67:src/riscv.cpp ****                 TCB::running->setFinished(true);
  68:src/riscv.cpp ****                 TCB::dispatch();
  69:src/riscv.cpp ****                 __asm__ volatile ("sd %0, 10 * 8(fp)" : : "r" (ret));
  70:src/riscv.cpp ****                 break;
  71:src/riscv.cpp ****             }
  72:src/riscv.cpp **** 
  73:src/riscv.cpp ****             case SyscallC::DISPATCH : {
  74:src/riscv.cpp ****                 TCB::dispatch();
  75:src/riscv.cpp ****                 break;
  76:src/riscv.cpp ****             }
  77:src/riscv.cpp **** 
  78:src/riscv.cpp ****             case SyscallC::GETC : {
  79:src/riscv.cpp ****                 char c = __getc();
  80:src/riscv.cpp ****                 __asm__ volatile ("sd %0, 10 * 8(fp)" : : "r" (c));
  81:src/riscv.cpp ****                 break;
  82:src/riscv.cpp ****             }
  83:src/riscv.cpp ****             case SyscallC::PUTC : {
GAS LISTING /tmp/ccEFFpD9.s 			page 6


  84:src/riscv.cpp ****                 char c;
  85:src/riscv.cpp ****                 __asm__ volatile ("ld %0, 11 * 8(fp)" : "=r" (c));
  86:src/riscv.cpp ****                 __putc(c);
  87:src/riscv.cpp ****                 break;
  88:src/riscv.cpp ****             }
  89:src/riscv.cpp **** 
  90:src/riscv.cpp ****             case SyscallC::SEMOPEN : {
  91:src/riscv.cpp ****                 uint64 handle, init;
  92:src/riscv.cpp ****                 uint64 ret = 0;
  93:src/riscv.cpp ****                 __asm__ volatile ("ld %0, 11 * 8(fp)" : "=r" (handle));
  94:src/riscv.cpp ****                 __asm__ volatile ("ld %0, 12 * 8(fp)" : "=r" (init));
  95:src/riscv.cpp ****                 Sem* newSem = Sem::sem_open(init);
  96:src/riscv.cpp ****                 *((Sem**)handle) = newSem;
  97:src/riscv.cpp ****                 __asm__ volatile ("sd %0, 10 * 8(fp)" : : "r" (ret));
  98:src/riscv.cpp ****                 break;
  99:src/riscv.cpp ****             }
 100:src/riscv.cpp **** 
 101:src/riscv.cpp ****             case SyscallC::SEMCLOSE : {
 102:src/riscv.cpp ****                 uint64 handle;
 103:src/riscv.cpp ****                 uint64 ret = 0;
 104:src/riscv.cpp ****                 __asm__ volatile ("ld %0, 11 * 8(fp)" : "=r" (handle));
 105:src/riscv.cpp ****                 ((Sem*)handle)->sem_close();
 106:src/riscv.cpp ****                 __asm__ volatile ("sd %0, 10 * 8(fp)" : : "r" (ret));
 107:src/riscv.cpp ****                 break;
 108:src/riscv.cpp ****             }
 109:src/riscv.cpp **** 
 110:src/riscv.cpp ****             case SyscallC::SEMWAIT : {
 111:src/riscv.cpp ****                 uint64 handle;
 112:src/riscv.cpp ****                 uint64 ret = 0;
 113:src/riscv.cpp ****                 __asm__ volatile ("ld %0, 11 * 8(fp)" : "=r" (handle));
 114:src/riscv.cpp ****                 ((Sem*)handle)->sem_wait();
 115:src/riscv.cpp ****                 __asm__ volatile ("sd %0, 10 * 8(fp)" : : "r" (ret));
 116:src/riscv.cpp ****                 break;
 117:src/riscv.cpp ****             }
 118:src/riscv.cpp **** 
 119:src/riscv.cpp ****             case SyscallC::SEMSIGNAL : {
 120:src/riscv.cpp ****                 uint64 handle;
 121:src/riscv.cpp ****                 uint64 ret = 0;
 122:src/riscv.cpp ****                 __asm__ volatile ("ld %0, 11 * 8(fp)" : "=r" (handle));
 123:src/riscv.cpp ****                 ((Sem*)handle)->sem_signal();
 124:src/riscv.cpp ****                 __asm__ volatile ("sd %0, 10 * 8(fp)" : : "r" (ret));
 125:src/riscv.cpp ****                 break;
 126:src/riscv.cpp ****             }
 127:src/riscv.cpp **** 
 128:src/riscv.cpp ****             case SyscallC::SEMTRYWAIT : {
 129:src/riscv.cpp ****                 uint64 handle;
 130:src/riscv.cpp ****                 uint64 ret = 0;
 131:src/riscv.cpp ****                 __asm__ volatile ("ld %0, 11 * 8(fp)" : "=r" (handle));
 132:src/riscv.cpp ****                 ((Sem*)handle)->sem_trywait();
 133:src/riscv.cpp ****                 __asm__ volatile ("sd %0, 10 * 8(fp)" : : "r" (ret));
 134:src/riscv.cpp ****                 break;
 135:src/riscv.cpp ****             }
 136:src/riscv.cpp ****         }
 137:src/riscv.cpp **** 
 138:src/riscv.cpp ****         writeSSTATUS(sstatus);
 139:src/riscv.cpp ****         writeSEPC(sepc);
 140:src/riscv.cpp ****     }
GAS LISTING /tmp/ccEFFpD9.s 			page 7


 141:src/riscv.cpp ****     else if (scause == 0x8000000000000001ULL)
 101              		.loc 1 141 10 is_stmt 1
 102              	.LBB76:
 103              	.LBB41:
 104 0054 9307F0FF 		li	a5,-1
 105 0058 9397F703 		slli	a5,a5,63
 106 005c 93871700 		addi	a5,a5,1
 107 0060 6304F52C 		beq	a0,a5,.L24
 108              	.LBE41:
 109              	.LBE76:
 142:src/riscv.cpp ****     {
 143:src/riscv.cpp ****         maskClearSIP(SIP_SSIE);
 144:src/riscv.cpp ****     }
 145:src/riscv.cpp ****     else if (scause == 0x8000000000000009ULL)
 110              		.loc 1 145 10
 111              	.LBB77:
 112              	.LBB47:
 113              	.LBB42:
 114 0064 9307F0FF 		li	a5,-1
 115 0068 9397F703 		slli	a5,a5,63
 116 006c 93879700 		addi	a5,a5,9
 117 0070 6302F52C 		beq	a0,a5,.L25
 118              	.LBB43:
 146:src/riscv.cpp ****     {
 147:src/riscv.cpp ****         // interrupt: yes; cause code: supervisor external interrupt (PLIC; could be keyboard)
 148:src/riscv.cpp ****         console_handler();
 149:src/riscv.cpp ****     }
 150:src/riscv.cpp ****     else
 151:src/riscv.cpp ****     {
 152:src/riscv.cpp ****         char chScause = scause + '0';
 119              		.loc 1 152 9
 120              		.loc 1 152 32 is_stmt 0
 121 0074 9374F50F 		andi	s1,a0,0xff
 122              		.loc 1 152 14
 123 0078 9B840403 		addiw	s1,s1,48
 124 007c 93F4F40F 		andi	s1,s1,0xff
 125              	.LVL3:
 153:src/riscv.cpp ****         __putc('F');__putc('A');__putc('T');__putc('A');__putc('L');__putc(' ');
 126              		.loc 1 153 9 is_stmt 1
 127              		.loc 1 153 15 is_stmt 0
 128 0080 13056004 		li	a0,70
 129              	.LVL4:
 130 0084 97000000 		call	__putc@plt
 130      E7800000 
 131              	.LVL5:
 132              		.loc 1 153 21 is_stmt 1
 133              		.loc 1 153 27 is_stmt 0
 134 008c 13051004 		li	a0,65
 135 0090 97000000 		call	__putc@plt
 135      E7800000 
 136              	.LVL6:
 137              		.loc 1 153 33 is_stmt 1
 138              		.loc 1 153 39 is_stmt 0
 139 0098 13054005 		li	a0,84
 140 009c 97000000 		call	__putc@plt
 140      E7800000 
 141              	.LVL7:
GAS LISTING /tmp/ccEFFpD9.s 			page 8


 142              		.loc 1 153 45 is_stmt 1
 143              		.loc 1 153 51 is_stmt 0
 144 00a4 13051004 		li	a0,65
 145 00a8 97000000 		call	__putc@plt
 145      E7800000 
 146              	.LVL8:
 147              		.loc 1 153 57 is_stmt 1
 148              		.loc 1 153 63 is_stmt 0
 149 00b0 1305C004 		li	a0,76
 150 00b4 97000000 		call	__putc@plt
 150      E7800000 
 151              	.LVL9:
 152              		.loc 1 153 69 is_stmt 1
 153              		.loc 1 153 75 is_stmt 0
 154 00bc 13050002 		li	a0,32
 155 00c0 97000000 		call	__putc@plt
 155      E7800000 
 156              	.LVL10:
 154:src/riscv.cpp ****         __putc('E');__putc('R');__putc('R');__putc('O');__putc('R');__putc('\n');
 157              		.loc 1 154 9 is_stmt 1
 158              		.loc 1 154 15 is_stmt 0
 159 00c8 13055004 		li	a0,69
 160 00cc 97000000 		call	__putc@plt
 160      E7800000 
 161              	.LVL11:
 162              		.loc 1 154 21 is_stmt 1
 163              		.loc 1 154 27 is_stmt 0
 164 00d4 13052005 		li	a0,82
 165 00d8 97000000 		call	__putc@plt
 165      E7800000 
 166              	.LVL12:
 167              		.loc 1 154 33 is_stmt 1
 168              		.loc 1 154 39 is_stmt 0
 169 00e0 13052005 		li	a0,82
 170 00e4 97000000 		call	__putc@plt
 170      E7800000 
 171              	.LVL13:
 172              		.loc 1 154 45 is_stmt 1
 173              		.loc 1 154 51 is_stmt 0
 174 00ec 1305F004 		li	a0,79
 175 00f0 97000000 		call	__putc@plt
 175      E7800000 
 176              	.LVL14:
 177              		.loc 1 154 57 is_stmt 1
 178              		.loc 1 154 63 is_stmt 0
 179 00f8 13052005 		li	a0,82
 180 00fc 97000000 		call	__putc@plt
 180      E7800000 
 181              	.LVL15:
 182              		.loc 1 154 69 is_stmt 1
 183              		.loc 1 154 75 is_stmt 0
 184 0104 1305A000 		li	a0,10
 185 0108 97000000 		call	__putc@plt
 185      E7800000 
 186              	.LVL16:
 155:src/riscv.cpp ****         __putc('S');__putc('C');__putc('A');__putc('U');__putc('S');__putc('E');__putc(' ');__putc(
 187              		.loc 1 155 9 is_stmt 1
GAS LISTING /tmp/ccEFFpD9.s 			page 9


 188              		.loc 1 155 15 is_stmt 0
 189 0110 13053005 		li	a0,83
 190 0114 97000000 		call	__putc@plt
 190      E7800000 
 191              	.LVL17:
 192              		.loc 1 155 21 is_stmt 1
 193              		.loc 1 155 27 is_stmt 0
 194 011c 13053004 		li	a0,67
 195 0120 97000000 		call	__putc@plt
 195      E7800000 
 196              	.LVL18:
 197              		.loc 1 155 33 is_stmt 1
 198              		.loc 1 155 39 is_stmt 0
 199 0128 13051004 		li	a0,65
 200 012c 97000000 		call	__putc@plt
 200      E7800000 
 201              	.LVL19:
 202              		.loc 1 155 45 is_stmt 1
 203              		.loc 1 155 51 is_stmt 0
 204 0134 13055005 		li	a0,85
 205 0138 97000000 		call	__putc@plt
 205      E7800000 
 206              	.LVL20:
 207              		.loc 1 155 57 is_stmt 1
 208              		.loc 1 155 63 is_stmt 0
 209 0140 13053005 		li	a0,83
 210 0144 97000000 		call	__putc@plt
 210      E7800000 
 211              	.LVL21:
 212              		.loc 1 155 69 is_stmt 1
 213              		.loc 1 155 75 is_stmt 0
 214 014c 13055004 		li	a0,69
 215 0150 97000000 		call	__putc@plt
 215      E7800000 
 216              	.LVL22:
 217              		.loc 1 155 81 is_stmt 1
 218              		.loc 1 155 87 is_stmt 0
 219 0158 13050002 		li	a0,32
 220 015c 97000000 		call	__putc@plt
 220      E7800000 
 221              	.LVL23:
 222              		.loc 1 155 93 is_stmt 1
 223              		.loc 1 155 99 is_stmt 0
 224 0164 13850400 		mv	a0,s1
 225 0168 97000000 		call	__putc@plt
 225      E7800000 
 226              	.LVL24:
 227              		.loc 1 155 110 is_stmt 1
 228              		.loc 1 155 116 is_stmt 0
 229 0170 1305A000 		li	a0,10
 230 0174 97000000 		call	__putc@plt
 230      E7800000 
 231              	.LVL25:
 156:src/riscv.cpp **** 
 157:src/riscv.cpp ****         *(int*)0x100000 = 0x5555;
 232              		.loc 1 157 9 is_stmt 1
 233              		.loc 1 157 25 is_stmt 0
GAS LISTING /tmp/ccEFFpD9.s 			page 10


 234 017c 37071000 		li	a4,1048576
 235 0180 B7570000 		li	a5,20480
 236 0184 9B875755 		addiw	a5,a5,1365
 237 0188 2320F700 		sw	a5,0(a4)
 238              	.LBE43:
 239              	.LBE42:
 240              	.LBE47:
 241              	.LBE77:
 158:src/riscv.cpp ****     }
 159:src/riscv.cpp **** }...
 242              		.loc 1 159 1
 243 018c 6F004007 		j	.L3
 244              	.LVL26:
 245              	.L23:
 246              	.LBB78:
 247              	.LBB48:
  24:src/riscv.cpp ****         volatile uint64 sepc = readSEPC() + 4;
 248              		.loc 1 24 9 is_stmt 1
 249              	.LBB49:
 250              	.LBB50:
  63:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 251              		.loc 2 63 5
  64:src/../h/riscv.hpp ****     return sepc;
 252              		.loc 2 64 5
  64:src/../h/riscv.hpp ****     return sepc;
 253              		.loc 2 64 64 is_stmt 0
 254              	#APP
 255              	# 64 "src/../h/riscv.hpp" 1
 256              		csrr a5, sepc
 257              	# 0 "" 2
 258              	#NO_APP
 259 0194 233CF4FC 		sd	a5,-40(s0)
  65:src/../h/riscv.hpp **** }
 260              		.loc 2 65 5 is_stmt 1
  65:src/../h/riscv.hpp **** }
 261              		.loc 2 65 12 is_stmt 0
 262 0198 833784FD 		ld	a5,-40(s0)
 263              	.LBE50:
 264              	.LBE49:
  24:src/riscv.cpp ****         volatile uint64 sepc = readSEPC() + 4;
 265              		.loc 1 24 43
 266 019c 93874700 		addi	a5,a5,4
  24:src/riscv.cpp ****         volatile uint64 sepc = readSEPC() + 4;
 267              		.loc 1 24 45
 268 01a0 233CF4FA 		sd	a5,-72(s0)
  25:src/riscv.cpp ****         volatile uint64 sstatus = readSSTATUS();
 269              		.loc 1 25 9 is_stmt 1
 270              	.LBB51:
 271              	.LBB52:
 101:src/../h/riscv.hpp **** 
 102:src/../h/riscv.hpp **** inline uint64 Riscv::readSSTATUS() {
 103:src/../h/riscv.hpp ****     uint64 volatile sstatus;
 272              		.loc 2 103 5
 104:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 273              		.loc 2 104 5
 274              		.loc 2 104 76 is_stmt 0
 275              	#APP
GAS LISTING /tmp/ccEFFpD9.s 			page 11


 276              	# 104 "src/../h/riscv.hpp" 1
 105              	    return sstatus;
 277              		csrr a5, sstatus
 278              	# 0 "" 2
 279              	#NO_APP
 280 01a8 2338F4FC 		sd	a5,-48(s0)
 281              		.loc 2 105 5 is_stmt 1
 282              		.loc 2 105 12 is_stmt 0
 283 01ac 833704FD 		ld	a5,-48(s0)
 284              	.LBE52:
 285              	.LBE51:
  25:src/riscv.cpp ****         volatile uint64 sstatus = readSSTATUS();
 286              		.loc 1 25 47
 287 01b0 2330F4FC 		sd	a5,-64(s0)
  27:src/riscv.cpp ****         uint64 ecallReason;
 288              		.loc 1 27 9 is_stmt 1
  29:src/riscv.cpp ****         __asm__ volatile ("ld %0, 10 * 8(fp)" : "=r" (ecallReason));
 289              		.loc 1 29 9
  29:src/riscv.cpp ****         __asm__ volatile ("ld %0, 10 * 8(fp)" : "=r" (ecallReason));
 290              		.loc 1 29 68 is_stmt 0
 291              	#APP
 292              	# 29 "src/riscv.cpp" 1
 293              		ld a5, 10 * 8(fp)
 294              	# 0 "" 2
 295              	.LVL27:
  31:src/riscv.cpp ****         switch (ecallReason) {
 296              		.loc 1 31 9 is_stmt 1
 297              	#NO_APP
 298 01b8 13072004 		li	a4,66
 299 01bc 636AF702 		bgtu	a5,a4,.L5
 300 01c0 93972700 		slli	a5,a5,2
 301              	.LVL28:
 302 01c4 17070000 		lla	a4,.L7
 302      13070700 
 303 01cc B387E700 		add	a5,a5,a4
 304 01d0 83A70700 		lw	a5,0(a5)
 305 01d4 B387E700 		add	a5,a5,a4
 306 01d8 67800700 		jr	a5
 307              		.section	.rodata
 308              		.align	2
 309              		.align	2
 310              	.L7:
 311 0000 00000000 		.word	.L5-.L7
 312 0004 00000000 		.word	.L18-.L7
 313 0008 00000000 		.word	.L17-.L7
 314 000c 00000000 		.word	.L5-.L7
 315 0010 00000000 		.word	.L5-.L7
 316 0014 00000000 		.word	.L5-.L7
 317 0018 00000000 		.word	.L5-.L7
 318 001c 00000000 		.word	.L5-.L7
 319 0020 00000000 		.word	.L5-.L7
 320 0024 00000000 		.word	.L5-.L7
 321 0028 00000000 		.word	.L5-.L7
 322 002c 00000000 		.word	.L5-.L7
 323 0030 00000000 		.word	.L5-.L7
 324 0034 00000000 		.word	.L5-.L7
 325 0038 00000000 		.word	.L5-.L7
GAS LISTING /tmp/ccEFFpD9.s 			page 12


 326 003c 00000000 		.word	.L5-.L7
 327 0040 00000000 		.word	.L5-.L7
 328 0044 00000000 		.word	.L16-.L7
 329 0048 00000000 		.word	.L15-.L7
 330 004c 00000000 		.word	.L14-.L7
 331 0050 00000000 		.word	.L5-.L7
 332 0054 00000000 		.word	.L5-.L7
 333 0058 00000000 		.word	.L5-.L7
 334 005c 00000000 		.word	.L5-.L7
 335 0060 00000000 		.word	.L5-.L7
 336 0064 00000000 		.word	.L5-.L7
 337 0068 00000000 		.word	.L5-.L7
 338 006c 00000000 		.word	.L5-.L7
 339 0070 00000000 		.word	.L5-.L7
 340 0074 00000000 		.word	.L5-.L7
 341 0078 00000000 		.word	.L5-.L7
 342 007c 00000000 		.word	.L5-.L7
 343 0080 00000000 		.word	.L5-.L7
 344 0084 00000000 		.word	.L13-.L7
 345 0088 00000000 		.word	.L12-.L7
 346 008c 00000000 		.word	.L11-.L7
 347 0090 00000000 		.word	.L10-.L7
 348 0094 00000000 		.word	.L5-.L7
 349 0098 00000000 		.word	.L9-.L7
 350 009c 00000000 		.word	.L5-.L7
 351 00a0 00000000 		.word	.L5-.L7
 352 00a4 00000000 		.word	.L5-.L7
 353 00a8 00000000 		.word	.L5-.L7
 354 00ac 00000000 		.word	.L5-.L7
 355 00b0 00000000 		.word	.L5-.L7
 356 00b4 00000000 		.word	.L5-.L7
 357 00b8 00000000 		.word	.L5-.L7
 358 00bc 00000000 		.word	.L5-.L7
 359 00c0 00000000 		.word	.L5-.L7
 360 00c4 00000000 		.word	.L5-.L7
 361 00c8 00000000 		.word	.L5-.L7
 362 00cc 00000000 		.word	.L5-.L7
 363 00d0 00000000 		.word	.L5-.L7
 364 00d4 00000000 		.word	.L5-.L7
 365 00d8 00000000 		.word	.L5-.L7
 366 00dc 00000000 		.word	.L5-.L7
 367 00e0 00000000 		.word	.L5-.L7
 368 00e4 00000000 		.word	.L5-.L7
 369 00e8 00000000 		.word	.L5-.L7
 370 00ec 00000000 		.word	.L5-.L7
 371 00f0 00000000 		.word	.L5-.L7
 372 00f4 00000000 		.word	.L5-.L7
 373 00f8 00000000 		.word	.L5-.L7
 374 00fc 00000000 		.word	.L5-.L7
 375 0100 00000000 		.word	.L5-.L7
 376 0104 00000000 		.word	.L8-.L7
 377 0108 00000000 		.word	.L6-.L7
 378              		.text
 379              	.L18:
 380              	.LBB53:
 381              	.LBB54:
  33:src/riscv.cpp ****             case  SyscallC::MEMALLOC : {
GAS LISTING /tmp/ccEFFpD9.s 			page 13


 382              		.loc 1 33 13
  33:src/riscv.cpp ****             case  SyscallC::MEMALLOC : {
 383              		.loc 1 33 40
 384              	.LBB55:
  34:src/riscv.cpp ****                 uint64 size;
 385              		.loc 1 34 17
  35:src/riscv.cpp ****                 uint64 ptr;
 386              		.loc 1 35 17
  36:src/riscv.cpp ****                 __asm__ volatile ("ld %0, 11 * 8(fp)" : "=r"(size));
 387              		.loc 1 36 17
  36:src/riscv.cpp ****                 __asm__ volatile ("ld %0, 11 * 8(fp)" : "=r"(size));
 388              		.loc 1 36 68 is_stmt 0
 389              	#APP
 390              	# 36 "src/riscv.cpp" 1
 391              		ld a0, 11 * 8(fp)
 392              	# 0 "" 2
 393              	.LVL29:
  37:src/riscv.cpp ****                 size = size * MEM_BLOCK_SIZE;
 394              		.loc 1 37 17 is_stmt 1
  38:src/riscv.cpp ****                 ptr = (uint64)MemoryAllocator::mem_alloc((size_t)size);
 395              		.loc 1 38 17
  38:src/riscv.cpp ****                 ptr = (uint64)MemoryAllocator::mem_alloc((size_t)size);
 396              		.loc 1 38 57 is_stmt 0
 397              	#NO_APP
 398 01e0 13156500 		slli	a0,a0,6
 399              	.LVL30:
 400 01e4 97000000 		call	_ZN15MemoryAllocator9mem_allocEm@plt
 400      E7800000 
 401              	.LVL31:
  39:src/riscv.cpp ****                 __asm__ volatile ("sd %0, 10 * 8(fp)" : : "r"(ptr));
 402              		.loc 1 39 17 is_stmt 1
  39:src/riscv.cpp ****                 __asm__ volatile ("sd %0, 10 * 8(fp)" : : "r"(ptr));
 403              		.loc 1 39 68 is_stmt 0
 404              	#APP
 405              	# 39 "src/riscv.cpp" 1
  40:src/riscv.cpp ****                 break;
 406              		sd a0, 10 * 8(fp)
 407              	# 0 "" 2
 408              		.loc 1 40 17 is_stmt 1
 409              	.LVL32:
 410              	#NO_APP
 411              	.L5:
 412              	.LBE55:
 413              	.LBE54:
 414              	.LBE53:
 138:src/riscv.cpp ****         writeSSTATUS(sstatus);
 415              		.loc 1 138 9
 138:src/riscv.cpp ****         writeSSTATUS(sstatus);
 416              		.loc 1 138 21 is_stmt 0
 417 01f0 833704FC 		ld	a5,-64(s0)
 418              	.LVL33:
 419              	.LBB69:
 420              	.LBB70:
 106:src/../h/riscv.hpp **** }
 107:src/../h/riscv.hpp **** 
 108:src/../h/riscv.hpp **** inline void Riscv::writeSSTATUS(uint64 sstatus) {
 109:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
GAS LISTING /tmp/ccEFFpD9.s 			page 14


 421              		.loc 2 109 5 is_stmt 1
 422              		.loc 2 109 77 is_stmt 0
 423              	#APP
 424              	# 109 "src/../h/riscv.hpp" 1
 110              	}
 425              		csrw sstatus, a5
 426              	# 0 "" 2
 427              	.LVL34:
 428              	#NO_APP
 429              	.LBE70:
 430              	.LBE69:
 139:src/riscv.cpp ****         writeSEPC(sepc);
 431              		.loc 1 139 9 is_stmt 1
 139:src/riscv.cpp ****         writeSEPC(sepc);
 432              		.loc 1 139 18 is_stmt 0
 433 01f8 833784FB 		ld	a5,-72(s0)
 434              	.LVL35:
 435              	.LBB71:
 436              	.LBB72:
  69:src/../h/riscv.hpp **** }
 437              		.loc 2 69 5 is_stmt 1
  69:src/../h/riscv.hpp **** }
 438              		.loc 2 69 65 is_stmt 0
 439              	#APP
 440              	# 69 "src/../h/riscv.hpp" 1
 441              		csrw sepc, a5
 442              	# 0 "" 2
 443              	.LVL36:
 444              	#NO_APP
 445              	.L3:
 446              	.LBE72:
 447              	.LBE71:
 448              	.LBE48:
 449              	.LBE78:
 450              		.loc 1 159 1
 451 0200 83308104 		ld	ra,72(sp)
 452              		.cfi_remember_state
 453              		.cfi_restore 1
 454 0204 03340104 		ld	s0,64(sp)
 455              		.cfi_restore 8
 456              		.cfi_def_cfa 2, 80
 457 0208 83348103 		ld	s1,56(sp)
 458              		.cfi_restore 9
 459 020c 13010105 		addi	sp,sp,80
 460              		.cfi_def_cfa_offset 0
 461 0210 67800000 		jr	ra
 462              	.LVL37:
 463              	.L17:
 464              		.cfi_restore_state
 465              	.LBB79:
 466              	.LBB74:
 467              	.LBB73:
 468              	.LBB68:
  43:src/riscv.cpp ****             case  SyscallC::MEMFREE : {
 469              		.loc 1 43 13 is_stmt 1
  43:src/riscv.cpp ****             case  SyscallC::MEMFREE : {
 470              		.loc 1 43 39
GAS LISTING /tmp/ccEFFpD9.s 			page 15


 471              	.LBB56:
  44:src/riscv.cpp ****                 uint64  ptr;
 472              		.loc 1 44 17
  45:src/riscv.cpp ****                 uint64 ret;
 473              		.loc 1 45 17
  46:src/riscv.cpp ****                 __asm__ volatile ("ld %0, 11 * 8(fp)" : "=r" (ptr));
 474              		.loc 1 46 17
  46:src/riscv.cpp ****                 __asm__ volatile ("ld %0, 11 * 8(fp)" : "=r" (ptr));
 475              		.loc 1 46 68 is_stmt 0
 476              	#APP
 477              	# 46 "src/riscv.cpp" 1
 478              		ld a0, 11 * 8(fp)
 479              	# 0 "" 2
 480              	.LVL38:
  47:src/riscv.cpp ****                 ret = MemoryAllocator::mem_free((void*)ptr);
 481              		.loc 1 47 17 is_stmt 1
  47:src/riscv.cpp ****                 ret = MemoryAllocator::mem_free((void*)ptr);
 482              		.loc 1 47 48 is_stmt 0
 483              	#NO_APP
 484 0218 97000000 		call	_ZN15MemoryAllocator8mem_freeEPv@plt
 484      E7800000 
 485              	.LVL39:
  48:src/riscv.cpp ****                 __asm__ volatile ("sd %0, 10 * 8(fp)" : : "r" (ret));
 486              		.loc 1 48 17 is_stmt 1
  48:src/riscv.cpp ****                 __asm__ volatile ("sd %0, 10 * 8(fp)" : : "r" (ret));
 487              		.loc 1 48 69 is_stmt 0
 488              	#APP
 489              	# 48 "src/riscv.cpp" 1
  49:src/riscv.cpp ****                 break;
 490              		sd a0, 10 * 8(fp)
 491              	# 0 "" 2
 492              		.loc 1 49 17 is_stmt 1
 493              	#NO_APP
 494 0224 6FF0DFFC 		j	.L5
 495              	.LVL40:
 496              	.L16:
 497              	.LBE56:
  52:src/riscv.cpp ****             case SyscallC::THREADCREATE : {
 498              		.loc 1 52 13
  52:src/riscv.cpp ****             case SyscallC::THREADCREATE : {
 499              		.loc 1 52 43
 500              	.LBB57:
  53:src/riscv.cpp ****                 uint64 handle, start_routine, arg, stack_space;
 501              		.loc 1 53 17
  54:src/riscv.cpp ****                 uint64 ret = 0;
 502              		.loc 1 54 17
  55:src/riscv.cpp ****                 __asm__ volatile ("ld %0, 11 * 8(fp)" : "=r" (handle));
 503              		.loc 1 55 17
  55:src/riscv.cpp ****                 __asm__ volatile ("ld %0, 11 * 8(fp)" : "=r" (handle));
 504              		.loc 1 55 71 is_stmt 0
 505              	#APP
 506              	# 55 "src/riscv.cpp" 1
 507              		ld s1, 11 * 8(fp)
 508              	# 0 "" 2
 509              	.LVL41:
  56:src/riscv.cpp ****                 __asm__ volatile ("ld %0, 12 * 8(fp)" : "=r" (start_routine));
 510              		.loc 1 56 17 is_stmt 1
GAS LISTING /tmp/ccEFFpD9.s 			page 16


  56:src/riscv.cpp ****                 __asm__ volatile ("ld %0, 12 * 8(fp)" : "=r" (start_routine));
 511              		.loc 1 56 78 is_stmt 0
 512              	# 56 "src/riscv.cpp" 1
 513              		ld a0, 12 * 8(fp)
 514              	# 0 "" 2
 515              	.LVL42:
  57:src/riscv.cpp ****                 __asm__ volatile ("ld %0, 13 * 8(fp)" : "=r" (arg));
 516              		.loc 1 57 17 is_stmt 1
  57:src/riscv.cpp ****                 __asm__ volatile ("ld %0, 13 * 8(fp)" : "=r" (arg));
 517              		.loc 1 57 68 is_stmt 0
 518              	# 57 "src/riscv.cpp" 1
 519              		ld a1, 13 * 8(fp)
 520              	# 0 "" 2
 521              	.LVL43:
  58:src/riscv.cpp ****                 __asm__ volatile ("ld %0, 14 * 8(fp)" : "=r" (stack_space));
 522              		.loc 1 58 17 is_stmt 1
  58:src/riscv.cpp ****                 __asm__ volatile ("ld %0, 14 * 8(fp)" : "=r" (stack_space));
 523              		.loc 1 58 76 is_stmt 0
 524              	# 58 "src/riscv.cpp" 1
 525              		ld a2, 14 * 8(fp)
 526              	# 0 "" 2
 527              	.LVL44:
  59:src/riscv.cpp ****                 TCB* newThread = TCB::createThread((TCB::Body)start_routine, (void*)arg, (char*)sta
 528              		.loc 1 59 17 is_stmt 1
  59:src/riscv.cpp ****                 TCB* newThread = TCB::createThread((TCB::Body)start_routine, (void*)arg, (char*)sta
 529              		.loc 1 59 51 is_stmt 0
 530              	#NO_APP
 531 0238 97000000 		call	_ZN3TCB12createThreadEPFvPvES0_Pc@plt
 531      E7800000 
 532              	.LVL45:
  60:src/riscv.cpp ****                 *((TCB**)handle) = newThread;
 533              		.loc 1 60 17 is_stmt 1
  60:src/riscv.cpp ****                 *((TCB**)handle) = newThread;
 534              		.loc 1 60 34 is_stmt 0
 535 0240 23B0A400 		sd	a0,0(s1)
  61:src/riscv.cpp ****                 __asm__ volatile ("sd %0, 10 * 8(fp)" : : "r" (ret));
 536              		.loc 1 61 17 is_stmt 1
  61:src/riscv.cpp ****                 __asm__ volatile ("sd %0, 10 * 8(fp)" : : "r" (ret));
 537              		.loc 1 61 69 is_stmt 0
 538 0244 93070000 		li	a5,0
 539              	#APP
 540              	# 61 "src/riscv.cpp" 1
  62:src/riscv.cpp ****                 break;
 541              		sd a5, 10 * 8(fp)
 542              	# 0 "" 2
 543              		.loc 1 62 17 is_stmt 1
 544              	#NO_APP
 545 024c 6FF05FFA 		j	.L5
 546              	.LVL46:
 547              	.L15:
 548              	.LBE57:
  65:src/riscv.cpp ****             case SyscallC::THREADEXIT : {
 549              		.loc 1 65 13
  65:src/riscv.cpp ****             case SyscallC::THREADEXIT : {
 550              		.loc 1 65 41
 551              	.LBB58:
  66:src/riscv.cpp ****                 uint64 ret = 0;
GAS LISTING /tmp/ccEFFpD9.s 			page 17


 552              		.loc 1 66 17
  67:src/riscv.cpp ****                 TCB::running->setFinished(true);
 553              		.loc 1 67 17
  67:src/riscv.cpp ****                 TCB::running->setFinished(true);
 554              		.loc 1 67 42 is_stmt 0
 555 0250 97070000 		la	a5,_ZN3TCB7runningE
 555      83B70700 
 556 0258 83B70700 		ld	a5,0(a5)
 557              	.LVL47:
 558              	.LBB59:
 559              	.LBB60:
 560              		.file 3 "src/../h/tcb.hpp"
   1:src/../h/tcb.hpp **** //
   2:src/../h/tcb.hpp **** // Created by os on 8/20/24.
   3:src/../h/tcb.hpp **** //
   4:src/../h/tcb.hpp **** 
   5:src/../h/tcb.hpp **** #ifndef PROJECT_BASE_TCB_HPP
   6:src/../h/tcb.hpp **** #define PROJECT_BASE_TCB_HPP
   7:src/../h/tcb.hpp **** 
   8:src/../h/tcb.hpp **** #include "scheduler.hpp"
   9:src/../h/tcb.hpp **** 
  10:src/../h/tcb.hpp **** 
  11:src/../h/tcb.hpp **** class TCB {
  12:src/../h/tcb.hpp **** 
  13:src/../h/tcb.hpp **** public:
  14:src/../h/tcb.hpp **** 
  15:src/../h/tcb.hpp ****     bool getFinished () const { return finished; }
  16:src/../h/tcb.hpp ****     void setFinished (bool val) { finished = val; }
 561              		.loc 3 16 35 is_stmt 1
 562              		.loc 3 16 44 is_stmt 0
 563 025c 13071000 		li	a4,1
 564 0260 A384E702 		sb	a4,41(a5)
 565              	.LVL48:
 566              	.LBE60:
 567              	.LBE59:
  68:src/riscv.cpp ****                 TCB::dispatch();
 568              		.loc 1 68 17 is_stmt 1
  68:src/riscv.cpp ****                 TCB::dispatch();
 569              		.loc 1 68 30 is_stmt 0
 570 0264 97000000 		call	_ZN3TCB8dispatchEv@plt
 570      E7800000 
 571              	.LVL49:
  69:src/riscv.cpp ****                 __asm__ volatile ("sd %0, 10 * 8(fp)" : : "r" (ret));
 572              		.loc 1 69 17 is_stmt 1
  69:src/riscv.cpp ****                 __asm__ volatile ("sd %0, 10 * 8(fp)" : : "r" (ret));
 573              		.loc 1 69 69 is_stmt 0
 574 026c 93070000 		li	a5,0
 575              	#APP
 576              	# 69 "src/riscv.cpp" 1
  70:src/riscv.cpp ****                 break;
 577              		sd a5, 10 * 8(fp)
 578              	# 0 "" 2
 579              		.loc 1 70 17 is_stmt 1
 580              	#NO_APP
 581 0274 6FF0DFF7 		j	.L5
 582              	.LVL50:
 583              	.L14:
GAS LISTING /tmp/ccEFFpD9.s 			page 18


 584              	.LBE58:
  73:src/riscv.cpp ****             case SyscallC::DISPATCH : {
 585              		.loc 1 73 13
  73:src/riscv.cpp ****             case SyscallC::DISPATCH : {
 586              		.loc 1 73 39
  74:src/riscv.cpp ****                 TCB::dispatch();
 587              		.loc 1 74 17
  74:src/riscv.cpp ****                 TCB::dispatch();
 588              		.loc 1 74 30 is_stmt 0
 589 0278 97000000 		call	_ZN3TCB8dispatchEv@plt
 589      E7800000 
 590              	.LVL51:
  75:src/riscv.cpp ****                 break;
 591              		.loc 1 75 17 is_stmt 1
 592 0280 6FF01FF7 		j	.L5
 593              	.LVL52:
 594              	.L8:
  78:src/riscv.cpp ****             case SyscallC::GETC : {
 595              		.loc 1 78 13
  78:src/riscv.cpp ****             case SyscallC::GETC : {
 596              		.loc 1 78 35
 597              	.LBB61:
  79:src/riscv.cpp ****                 char c = __getc();
 598              		.loc 1 79 17
  79:src/riscv.cpp ****                 char c = __getc();
 599              		.loc 1 79 32 is_stmt 0
 600 0284 97000000 		call	__getc@plt
 600      E7800000 
 601              	.LVL53:
  80:src/riscv.cpp ****                 __asm__ volatile ("sd %0, 10 * 8(fp)" : : "r" (c));
 602              		.loc 1 80 17 is_stmt 1
  80:src/riscv.cpp ****                 __asm__ volatile ("sd %0, 10 * 8(fp)" : : "r" (c));
 603              		.loc 1 80 67 is_stmt 0
 604              	#APP
 605              	# 80 "src/riscv.cpp" 1
  81:src/riscv.cpp ****                 break;
 606              		sd a0, 10 * 8(fp)
 607              	# 0 "" 2
 608              		.loc 1 81 17 is_stmt 1
 609              	#NO_APP
 610 0290 6FF01FF6 		j	.L5
 611              	.LVL54:
 612              	.L6:
 613              	.LBE61:
  83:src/riscv.cpp ****             case SyscallC::PUTC : {
 614              		.loc 1 83 13
  83:src/riscv.cpp ****             case SyscallC::PUTC : {
 615              		.loc 1 83 35
 616              	.LBB62:
  84:src/riscv.cpp ****                 char c;
 617              		.loc 1 84 17
  85:src/riscv.cpp ****                 __asm__ volatile ("ld %0, 11 * 8(fp)" : "=r" (c));
 618              		.loc 1 85 17
  85:src/riscv.cpp ****                 __asm__ volatile ("ld %0, 11 * 8(fp)" : "=r" (c));
 619              		.loc 1 85 66 is_stmt 0
 620              	#APP
 621              	# 85 "src/riscv.cpp" 1
GAS LISTING /tmp/ccEFFpD9.s 			page 19


 622              		ld a0, 11 * 8(fp)
 623              	# 0 "" 2
 624              	.LVL55:
  86:src/riscv.cpp ****                 __putc(c);
 625              		.loc 1 86 17 is_stmt 1
  86:src/riscv.cpp ****                 __putc(c);
 626              		.loc 1 86 23 is_stmt 0
 627              	#NO_APP
 628 0298 1375F50F 		andi	a0,a0,0xff
 629 029c 97000000 		call	__putc@plt
 629      E7800000 
 630              	.LVL56:
  87:src/riscv.cpp ****                 break;
 631              		.loc 1 87 17 is_stmt 1
 632 02a4 6FF0DFF4 		j	.L5
 633              	.LVL57:
 634              	.L13:
 635              	.LBE62:
  90:src/riscv.cpp ****             case SyscallC::SEMOPEN : {
 636              		.loc 1 90 13
  90:src/riscv.cpp ****             case SyscallC::SEMOPEN : {
 637              		.loc 1 90 38
 638              	.LBB63:
  91:src/riscv.cpp ****                 uint64 handle, init;
 639              		.loc 1 91 17
  92:src/riscv.cpp ****                 uint64 ret = 0;
 640              		.loc 1 92 17
  93:src/riscv.cpp ****                 __asm__ volatile ("ld %0, 11 * 8(fp)" : "=r" (handle));
 641              		.loc 1 93 17
  93:src/riscv.cpp ****                 __asm__ volatile ("ld %0, 11 * 8(fp)" : "=r" (handle));
 642              		.loc 1 93 71 is_stmt 0
 643              	#APP
 644              	# 93 "src/riscv.cpp" 1
 645              		ld s1, 11 * 8(fp)
 646              	# 0 "" 2
 647              	.LVL58:
  94:src/riscv.cpp ****                 __asm__ volatile ("ld %0, 12 * 8(fp)" : "=r" (init));
 648              		.loc 1 94 17 is_stmt 1
  94:src/riscv.cpp ****                 __asm__ volatile ("ld %0, 12 * 8(fp)" : "=r" (init));
 649              		.loc 1 94 69 is_stmt 0
 650              	# 94 "src/riscv.cpp" 1
 651              		ld a0, 12 * 8(fp)
 652              	# 0 "" 2
 653              	.LVL59:
  95:src/riscv.cpp ****                 Sem* newSem = Sem::sem_open(init);
 654              		.loc 1 95 17 is_stmt 1
  95:src/riscv.cpp ****                 Sem* newSem = Sem::sem_open(init);
 655              		.loc 1 95 44 is_stmt 0
 656              	#NO_APP
 657 02b0 97000000 		call	_ZN3Sem8sem_openEm@plt
 657      E7800000 
 658              	.LVL60:
  96:src/riscv.cpp ****                 *((Sem**)handle) = newSem;
 659              		.loc 1 96 17 is_stmt 1
  96:src/riscv.cpp ****                 *((Sem**)handle) = newSem;
 660              		.loc 1 96 34 is_stmt 0
 661 02b8 23B0A400 		sd	a0,0(s1)
GAS LISTING /tmp/ccEFFpD9.s 			page 20


  97:src/riscv.cpp ****                 __asm__ volatile ("sd %0, 10 * 8(fp)" : : "r" (ret));
 662              		.loc 1 97 17 is_stmt 1
  97:src/riscv.cpp ****                 __asm__ volatile ("sd %0, 10 * 8(fp)" : : "r" (ret));
 663              		.loc 1 97 69 is_stmt 0
 664 02bc 93070000 		li	a5,0
 665              	#APP
 666              	# 97 "src/riscv.cpp" 1
  98:src/riscv.cpp ****                 break;
 667              		sd a5, 10 * 8(fp)
 668              	# 0 "" 2
 669              		.loc 1 98 17 is_stmt 1
 670              	#NO_APP
 671 02c4 6FF0DFF2 		j	.L5
 672              	.LVL61:
 673              	.L12:
 674              	.LBE63:
 101:src/riscv.cpp ****             case SyscallC::SEMCLOSE : {
 675              		.loc 1 101 13
 101:src/riscv.cpp ****             case SyscallC::SEMCLOSE : {
 676              		.loc 1 101 39
 677              	.LBB64:
 102:src/riscv.cpp ****                 uint64 handle;
 678              		.loc 1 102 17
 103:src/riscv.cpp ****                 uint64 ret = 0;
 679              		.loc 1 103 17
 104:src/riscv.cpp ****                 __asm__ volatile ("ld %0, 11 * 8(fp)" : "=r" (handle));
 680              		.loc 1 104 17
 104:src/riscv.cpp ****                 __asm__ volatile ("ld %0, 11 * 8(fp)" : "=r" (handle));
 681              		.loc 1 104 71 is_stmt 0
 682              	#APP
 683              	# 104 "src/riscv.cpp" 1
 684              		ld a0, 11 * 8(fp)
 685              	# 0 "" 2
 686              	.LVL62:
 105:src/riscv.cpp ****                 ((Sem*)handle)->sem_close();
 687              		.loc 1 105 17 is_stmt 1
 105:src/riscv.cpp ****                 ((Sem*)handle)->sem_close();
 688              		.loc 1 105 42 is_stmt 0
 689              	#NO_APP
 690 02cc 97000000 		call	_ZN3Sem9sem_closeEv@plt
 690      E7800000 
 691              	.LVL63:
 106:src/riscv.cpp ****                 __asm__ volatile ("sd %0, 10 * 8(fp)" : : "r" (ret));
 692              		.loc 1 106 17 is_stmt 1
 106:src/riscv.cpp ****                 __asm__ volatile ("sd %0, 10 * 8(fp)" : : "r" (ret));
 693              		.loc 1 106 69 is_stmt 0
 694 02d4 93070000 		li	a5,0
 695              	#APP
 696              	# 106 "src/riscv.cpp" 1
 107:src/riscv.cpp ****                 break;
 697              		sd a5, 10 * 8(fp)
 698              	# 0 "" 2
 699              		.loc 1 107 17 is_stmt 1
 700              	#NO_APP
 701 02dc 6FF05FF1 		j	.L5
 702              	.LVL64:
 703              	.L11:
GAS LISTING /tmp/ccEFFpD9.s 			page 21


 704              	.LBE64:
 110:src/riscv.cpp ****             case SyscallC::SEMWAIT : {
 705              		.loc 1 110 13
 110:src/riscv.cpp ****             case SyscallC::SEMWAIT : {
 706              		.loc 1 110 38
 707              	.LBB65:
 111:src/riscv.cpp ****                 uint64 handle;
 708              		.loc 1 111 17
 112:src/riscv.cpp ****                 uint64 ret = 0;
 709              		.loc 1 112 17
 113:src/riscv.cpp ****                 __asm__ volatile ("ld %0, 11 * 8(fp)" : "=r" (handle));
 710              		.loc 1 113 17
 113:src/riscv.cpp ****                 __asm__ volatile ("ld %0, 11 * 8(fp)" : "=r" (handle));
 711              		.loc 1 113 71 is_stmt 0
 712              	#APP
 713              	# 113 "src/riscv.cpp" 1
 714              		ld a0, 11 * 8(fp)
 715              	# 0 "" 2
 716              	.LVL65:
 114:src/riscv.cpp ****                 ((Sem*)handle)->sem_wait();
 717              		.loc 1 114 17 is_stmt 1
 114:src/riscv.cpp ****                 ((Sem*)handle)->sem_wait();
 718              		.loc 1 114 41 is_stmt 0
 719              	#NO_APP
 720 02e4 97000000 		call	_ZN3Sem8sem_waitEv@plt
 720      E7800000 
 721              	.LVL66:
 115:src/riscv.cpp ****                 __asm__ volatile ("sd %0, 10 * 8(fp)" : : "r" (ret));
 722              		.loc 1 115 17 is_stmt 1
 115:src/riscv.cpp ****                 __asm__ volatile ("sd %0, 10 * 8(fp)" : : "r" (ret));
 723              		.loc 1 115 69 is_stmt 0
 724 02ec 93070000 		li	a5,0
 725              	#APP
 726              	# 115 "src/riscv.cpp" 1
 116:src/riscv.cpp ****                 break;
 727              		sd a5, 10 * 8(fp)
 728              	# 0 "" 2
 729              		.loc 1 116 17 is_stmt 1
 730              	#NO_APP
 731 02f4 6FF0DFEF 		j	.L5
 732              	.LVL67:
 733              	.L10:
 734              	.LBE65:
 119:src/riscv.cpp ****             case SyscallC::SEMSIGNAL : {
 735              		.loc 1 119 13
 119:src/riscv.cpp ****             case SyscallC::SEMSIGNAL : {
 736              		.loc 1 119 40
 737              	.LBB66:
 120:src/riscv.cpp ****                 uint64 handle;
 738              		.loc 1 120 17
 121:src/riscv.cpp ****                 uint64 ret = 0;
 739              		.loc 1 121 17
 122:src/riscv.cpp ****                 __asm__ volatile ("ld %0, 11 * 8(fp)" : "=r" (handle));
 740              		.loc 1 122 17
 122:src/riscv.cpp ****                 __asm__ volatile ("ld %0, 11 * 8(fp)" : "=r" (handle));
 741              		.loc 1 122 71 is_stmt 0
 742              	#APP
GAS LISTING /tmp/ccEFFpD9.s 			page 22


 743              	# 122 "src/riscv.cpp" 1
 744              		ld a0, 11 * 8(fp)
 745              	# 0 "" 2
 746              	.LVL68:
 123:src/riscv.cpp ****                 ((Sem*)handle)->sem_signal();
 747              		.loc 1 123 17 is_stmt 1
 123:src/riscv.cpp ****                 ((Sem*)handle)->sem_signal();
 748              		.loc 1 123 43 is_stmt 0
 749              	#NO_APP
 750 02fc 97000000 		call	_ZN3Sem10sem_signalEv@plt
 750      E7800000 
 751              	.LVL69:
 124:src/riscv.cpp ****                 __asm__ volatile ("sd %0, 10 * 8(fp)" : : "r" (ret));
 752              		.loc 1 124 17 is_stmt 1
 124:src/riscv.cpp ****                 __asm__ volatile ("sd %0, 10 * 8(fp)" : : "r" (ret));
 753              		.loc 1 124 69 is_stmt 0
 754 0304 93070000 		li	a5,0
 755              	#APP
 756              	# 124 "src/riscv.cpp" 1
 125:src/riscv.cpp ****                 break;
 757              		sd a5, 10 * 8(fp)
 758              	# 0 "" 2
 759              		.loc 1 125 17 is_stmt 1
 760              	#NO_APP
 761 030c 6FF05FEE 		j	.L5
 762              	.LVL70:
 763              	.L9:
 764              	.LBE66:
 128:src/riscv.cpp ****             case SyscallC::SEMTRYWAIT : {
 765              		.loc 1 128 13
 128:src/riscv.cpp ****             case SyscallC::SEMTRYWAIT : {
 766              		.loc 1 128 41
 767              	.LBB67:
 129:src/riscv.cpp ****                 uint64 handle;
 768              		.loc 1 129 17
 130:src/riscv.cpp ****                 uint64 ret = 0;
 769              		.loc 1 130 17
 131:src/riscv.cpp ****                 __asm__ volatile ("ld %0, 11 * 8(fp)" : "=r" (handle));
 770              		.loc 1 131 17
 131:src/riscv.cpp ****                 __asm__ volatile ("ld %0, 11 * 8(fp)" : "=r" (handle));
 771              		.loc 1 131 71 is_stmt 0
 772              	#APP
 773              	# 131 "src/riscv.cpp" 1
 774              		ld a0, 11 * 8(fp)
 775              	# 0 "" 2
 776              	.LVL71:
 132:src/riscv.cpp ****                 ((Sem*)handle)->sem_trywait();
 777              		.loc 1 132 17 is_stmt 1
 132:src/riscv.cpp ****                 ((Sem*)handle)->sem_trywait();
 778              		.loc 1 132 44 is_stmt 0
 779              	#NO_APP
 780 0314 97000000 		call	_ZN3Sem11sem_trywaitEv@plt
 780      E7800000 
 781              	.LVL72:
 133:src/riscv.cpp ****                 __asm__ volatile ("sd %0, 10 * 8(fp)" : : "r" (ret));
 782              		.loc 1 133 17 is_stmt 1
 133:src/riscv.cpp ****                 __asm__ volatile ("sd %0, 10 * 8(fp)" : : "r" (ret));
GAS LISTING /tmp/ccEFFpD9.s 			page 23


 783              		.loc 1 133 69 is_stmt 0
 784 031c 93070000 		li	a5,0
 785              	#APP
 786              	# 133 "src/riscv.cpp" 1
 134:src/riscv.cpp ****                 break;
 787              		sd a5, 10 * 8(fp)
 788              	# 0 "" 2
 789              		.loc 1 134 17 is_stmt 1
 790              	#NO_APP
 791 0324 6FF0DFEC 		j	.L5
 792              	.LVL73:
 793              	.L24:
 794              	.LBE67:
 795              	.LBE68:
 796              	.LBE73:
 797              	.LBE74:
 798              	.LBB75:
 143:src/riscv.cpp ****         maskClearSIP(SIP_SSIE);
 799              		.loc 1 143 9
 800              	.LBB44:
 801              	.LBB45:
  81:src/../h/riscv.hpp **** }
 802              		.loc 2 81 5
  81:src/../h/riscv.hpp **** }
 803              		.loc 2 81 64 is_stmt 0
 804 0328 93072000 		li	a5,2
 805              	#APP
 806              	# 81 "src/../h/riscv.hpp" 1
  82:src/../h/riscv.hpp **** 
 807              		csrc sip, a5
 808              	# 0 "" 2
 809              		.loc 2 82 1
 810              	#NO_APP
 811 0330 6FF01FED 		j	.L3
 812              	.LVL74:
 813              	.L25:
 814              	.LBE45:
 815              	.LBE44:
 816              	.LBB46:
 148:src/riscv.cpp ****         console_handler();
 817              		.loc 1 148 9 is_stmt 1
 148:src/riscv.cpp ****         console_handler();
 818              		.loc 1 148 24 is_stmt 0
 819 0334 97000000 		call	console_handler@plt
 819      E7800000 
 820              	.LVL75:
 821 033c 6FF05FEC 		j	.L3
 822              	.LBE46:
 823              	.LBE75:
 824              	.LBE79:
 825              		.cfi_endproc
 826              	.LFE31:
 828              	.Letext0:
 829              		.file 4 "src/../h/../lib/hw.h"
 830              		.file 5 "src/../h/MemoryAllocator.h"
 831              		.file 6 "src/../h/list.hpp"
 832              		.file 7 "src/../h/semaphore.hpp"
GAS LISTING /tmp/ccEFFpD9.s 			page 24


 833              		.file 8 "src/../lib/console.h"
GAS LISTING /tmp/ccEFFpD9.s 			page 25


DEFINED SYMBOLS
                            *ABS*:0000000000000000 riscv.cpp
     /tmp/ccEFFpD9.s:9      .text:0000000000000000 _ZN5Riscv10popSPPSPIEEv
     /tmp/ccEFFpD9.s:13     .text:0000000000000000 .L0 
     /tmp/ccEFFpD9.s:14     .text:0000000000000000 .L0 
     /tmp/ccEFFpD9.s:15     .text:0000000000000004 .L0 
     /tmp/ccEFFpD9.s:17     .text:0000000000000008 .L0 
     /tmp/ccEFFpD9.s:19     .text:000000000000000c .L0 
     /tmp/ccEFFpD9.s:25     .text:000000000000000c .L0 
     /tmp/ccEFFpD9.s:26     .text:000000000000000c .L0 
     /tmp/ccEFFpD9.s:27     .text:000000000000000c .L0 
     /tmp/ccEFFpD9.s:37     .text:0000000000000014 .L0 
       src/riscv.cpp:15     .text:0000000000000014 .L0 
     /tmp/ccEFFpD9.s:43     .text:0000000000000018 .L0 
       src/riscv.cpp:16     .text:0000000000000018 .L0 
     /tmp/ccEFFpD9.s:49     .text:000000000000001c .L0 
     /tmp/ccEFFpD9.s:50     .text:0000000000000020 .L0 
     /tmp/ccEFFpD9.s:51     .text:0000000000000020 .L0 
     /tmp/ccEFFpD9.s:53     .text:0000000000000024 .L0 
     /tmp/ccEFFpD9.s:55     .text:0000000000000028 .L0 
     /tmp/ccEFFpD9.s:61     .text:0000000000000028 _ZN5Riscv20handleSupervisorTrapEv
     /tmp/ccEFFpD9.s:64     .text:0000000000000028 .L0 
     /tmp/ccEFFpD9.s:65     .text:0000000000000028 .L0 
     /tmp/ccEFFpD9.s:66     .text:000000000000002c .L0 
     /tmp/ccEFFpD9.s:70     .text:0000000000000038 .L0 
     /tmp/ccEFFpD9.s:71     .text:0000000000000038 .L0 
     /tmp/ccEFFpD9.s:72     .text:0000000000000038 .L0 
     /tmp/ccEFFpD9.s:74     .text:000000000000003c .L0 
     /tmp/ccEFFpD9.s:78     .text:000000000000003c .L0 
     /tmp/ccEFFpD9.s:79     .text:000000000000003c .L0 
     /tmp/ccEFFpD9.s:80     .text:000000000000003c .L0 
  src/../h/riscv.hpp:54     .text:000000000000003c .L0 
     /tmp/ccEFFpD9.s:88     .text:0000000000000044 .L0 
     /tmp/ccEFFpD9.s:89     .text:0000000000000044 .L0 
     /tmp/ccEFFpD9.s:95     .text:0000000000000048 .L0 
     /tmp/ccEFFpD9.s:96     .text:0000000000000048 .L0 
     /tmp/ccEFFpD9.s:98     .text:000000000000004c .L0 
     /tmp/ccEFFpD9.s:104    .text:0000000000000054 .L0 
     /tmp/ccEFFpD9.s:114    .text:0000000000000064 .L0 
     /tmp/ccEFFpD9.s:120    .text:0000000000000074 .L0 
     /tmp/ccEFFpD9.s:121    .text:0000000000000074 .L0 
     /tmp/ccEFFpD9.s:123    .text:0000000000000078 .L0 
     /tmp/ccEFFpD9.s:127    .text:0000000000000080 .L0 
     /tmp/ccEFFpD9.s:128    .text:0000000000000080 .L0 
     /tmp/ccEFFpD9.s:133    .text:000000000000008c .L0 
     /tmp/ccEFFpD9.s:134    .text:000000000000008c .L0 
     /tmp/ccEFFpD9.s:138    .text:0000000000000098 .L0 
     /tmp/ccEFFpD9.s:139    .text:0000000000000098 .L0 
     /tmp/ccEFFpD9.s:143    .text:00000000000000a4 .L0 
     /tmp/ccEFFpD9.s:144    .text:00000000000000a4 .L0 
     /tmp/ccEFFpD9.s:148    .text:00000000000000b0 .L0 
     /tmp/ccEFFpD9.s:149    .text:00000000000000b0 .L0 
     /tmp/ccEFFpD9.s:153    .text:00000000000000bc .L0 
     /tmp/ccEFFpD9.s:154    .text:00000000000000bc .L0 
     /tmp/ccEFFpD9.s:158    .text:00000000000000c8 .L0 
     /tmp/ccEFFpD9.s:159    .text:00000000000000c8 .L0 
     /tmp/ccEFFpD9.s:163    .text:00000000000000d4 .L0 
GAS LISTING /tmp/ccEFFpD9.s 			page 26


     /tmp/ccEFFpD9.s:164    .text:00000000000000d4 .L0 
     /tmp/ccEFFpD9.s:168    .text:00000000000000e0 .L0 
     /tmp/ccEFFpD9.s:169    .text:00000000000000e0 .L0 
     /tmp/ccEFFpD9.s:173    .text:00000000000000ec .L0 
     /tmp/ccEFFpD9.s:174    .text:00000000000000ec .L0 
     /tmp/ccEFFpD9.s:178    .text:00000000000000f8 .L0 
     /tmp/ccEFFpD9.s:179    .text:00000000000000f8 .L0 
     /tmp/ccEFFpD9.s:183    .text:0000000000000104 .L0 
     /tmp/ccEFFpD9.s:184    .text:0000000000000104 .L0 
     /tmp/ccEFFpD9.s:188    .text:0000000000000110 .L0 
     /tmp/ccEFFpD9.s:189    .text:0000000000000110 .L0 
     /tmp/ccEFFpD9.s:193    .text:000000000000011c .L0 
     /tmp/ccEFFpD9.s:194    .text:000000000000011c .L0 
     /tmp/ccEFFpD9.s:198    .text:0000000000000128 .L0 
     /tmp/ccEFFpD9.s:199    .text:0000000000000128 .L0 
     /tmp/ccEFFpD9.s:203    .text:0000000000000134 .L0 
     /tmp/ccEFFpD9.s:204    .text:0000000000000134 .L0 
     /tmp/ccEFFpD9.s:208    .text:0000000000000140 .L0 
     /tmp/ccEFFpD9.s:209    .text:0000000000000140 .L0 
     /tmp/ccEFFpD9.s:213    .text:000000000000014c .L0 
     /tmp/ccEFFpD9.s:214    .text:000000000000014c .L0 
     /tmp/ccEFFpD9.s:218    .text:0000000000000158 .L0 
     /tmp/ccEFFpD9.s:219    .text:0000000000000158 .L0 
     /tmp/ccEFFpD9.s:223    .text:0000000000000164 .L0 
     /tmp/ccEFFpD9.s:224    .text:0000000000000164 .L0 
     /tmp/ccEFFpD9.s:228    .text:0000000000000170 .L0 
     /tmp/ccEFFpD9.s:229    .text:0000000000000170 .L0 
     /tmp/ccEFFpD9.s:233    .text:000000000000017c .L0 
     /tmp/ccEFFpD9.s:234    .text:000000000000017c .L0 
     /tmp/ccEFFpD9.s:243    .text:000000000000018c .L0 
     /tmp/ccEFFpD9.s:251    .text:0000000000000190 .L0 
     /tmp/ccEFFpD9.s:252    .text:0000000000000190 .L0 
     /tmp/ccEFFpD9.s:253    .text:0000000000000190 .L0 
  src/../h/riscv.hpp:64     .text:0000000000000190 .L0 
     /tmp/ccEFFpD9.s:261    .text:0000000000000198 .L0 
     /tmp/ccEFFpD9.s:262    .text:0000000000000198 .L0 
     /tmp/ccEFFpD9.s:266    .text:000000000000019c .L0 
     /tmp/ccEFFpD9.s:268    .text:00000000000001a0 .L0 
     /tmp/ccEFFpD9.s:272    .text:00000000000001a4 .L0 
     /tmp/ccEFFpD9.s:273    .text:00000000000001a4 .L0 
     /tmp/ccEFFpD9.s:274    .text:00000000000001a4 .L0 
  src/../h/riscv.hpp:104    .text:00000000000001a4 .L0 
     /tmp/ccEFFpD9.s:282    .text:00000000000001ac .L0 
     /tmp/ccEFFpD9.s:283    .text:00000000000001ac .L0 
     /tmp/ccEFFpD9.s:287    .text:00000000000001b0 .L0 
     /tmp/ccEFFpD9.s:289    .text:00000000000001b4 .L0 
     /tmp/ccEFFpD9.s:290    .text:00000000000001b4 .L0 
       src/riscv.cpp:29     .text:00000000000001b4 .L0 
     /tmp/ccEFFpD9.s:298    .text:00000000000001b8 .L0 
     /tmp/ccEFFpD9.s:383    .text:00000000000001dc .L0 
     /tmp/ccEFFpD9.s:385    .text:00000000000001dc .L0 
     /tmp/ccEFFpD9.s:386    .text:00000000000001dc .L0 
     /tmp/ccEFFpD9.s:387    .text:00000000000001dc .L0 
     /tmp/ccEFFpD9.s:388    .text:00000000000001dc .L0 
       src/riscv.cpp:36     .text:00000000000001dc .L0 
     /tmp/ccEFFpD9.s:395    .text:00000000000001e0 .L0 
     /tmp/ccEFFpD9.s:396    .text:00000000000001e0 .L0 
GAS LISTING /tmp/ccEFFpD9.s 			page 27


     /tmp/ccEFFpD9.s:398    .text:00000000000001e0 .L0 
     /tmp/ccEFFpD9.s:403    .text:00000000000001ec .L0 
       src/riscv.cpp:39     .text:00000000000001ec .L0 
     /tmp/ccEFFpD9.s:415    .text:00000000000001f0 .L0 
     /tmp/ccEFFpD9.s:416    .text:00000000000001f0 .L0 
     /tmp/ccEFFpD9.s:417    .text:00000000000001f0 .L0 
     /tmp/ccEFFpD9.s:422    .text:00000000000001f4 .L0 
  src/../h/riscv.hpp:109    .text:00000000000001f4 .L0 
     /tmp/ccEFFpD9.s:432    .text:00000000000001f8 .L0 
     /tmp/ccEFFpD9.s:433    .text:00000000000001f8 .L0 
     /tmp/ccEFFpD9.s:438    .text:00000000000001fc .L0 
  src/../h/riscv.hpp:69     .text:00000000000001fc .L0 
     /tmp/ccEFFpD9.s:451    .text:0000000000000200 .L0 
     /tmp/ccEFFpD9.s:452    .text:0000000000000204 .L0 
     /tmp/ccEFFpD9.s:453    .text:0000000000000204 .L0 
     /tmp/ccEFFpD9.s:455    .text:0000000000000208 .L0 
     /tmp/ccEFFpD9.s:456    .text:0000000000000208 .L0 
     /tmp/ccEFFpD9.s:458    .text:000000000000020c .L0 
     /tmp/ccEFFpD9.s:460    .text:0000000000000210 .L0 
     /tmp/ccEFFpD9.s:464    .text:0000000000000214 .L0 
     /tmp/ccEFFpD9.s:470    .text:0000000000000214 .L0 
     /tmp/ccEFFpD9.s:472    .text:0000000000000214 .L0 
     /tmp/ccEFFpD9.s:473    .text:0000000000000214 .L0 
     /tmp/ccEFFpD9.s:474    .text:0000000000000214 .L0 
     /tmp/ccEFFpD9.s:475    .text:0000000000000214 .L0 
       src/riscv.cpp:46     .text:0000000000000214 .L0 
     /tmp/ccEFFpD9.s:482    .text:0000000000000218 .L0 
     /tmp/ccEFFpD9.s:484    .text:0000000000000218 .L0 
     /tmp/ccEFFpD9.s:487    .text:0000000000000220 .L0 
       src/riscv.cpp:48     .text:0000000000000220 .L0 
     /tmp/ccEFFpD9.s:494    .text:0000000000000224 .L0 
     /tmp/ccEFFpD9.s:499    .text:0000000000000228 .L0 
     /tmp/ccEFFpD9.s:501    .text:0000000000000228 .L0 
     /tmp/ccEFFpD9.s:502    .text:0000000000000228 .L0 
     /tmp/ccEFFpD9.s:503    .text:0000000000000228 .L0 
     /tmp/ccEFFpD9.s:504    .text:0000000000000228 .L0 
       src/riscv.cpp:55     .text:0000000000000228 .L0 
     /tmp/ccEFFpD9.s:511    .text:000000000000022c .L0 
       src/riscv.cpp:56     .text:000000000000022c .L0 
     /tmp/ccEFFpD9.s:517    .text:0000000000000230 .L0 
       src/riscv.cpp:57     .text:0000000000000230 .L0 
     /tmp/ccEFFpD9.s:523    .text:0000000000000234 .L0 
       src/riscv.cpp:58     .text:0000000000000234 .L0 
     /tmp/ccEFFpD9.s:529    .text:0000000000000238 .L0 
     /tmp/ccEFFpD9.s:531    .text:0000000000000238 .L0 
     /tmp/ccEFFpD9.s:534    .text:0000000000000240 .L0 
     /tmp/ccEFFpD9.s:535    .text:0000000000000240 .L0 
     /tmp/ccEFFpD9.s:537    .text:0000000000000244 .L0 
     /tmp/ccEFFpD9.s:538    .text:0000000000000244 .L0 
     /tmp/ccEFFpD9.s:545    .text:000000000000024c .L0 
     /tmp/ccEFFpD9.s:550    .text:0000000000000250 .L0 
     /tmp/ccEFFpD9.s:552    .text:0000000000000250 .L0 
     /tmp/ccEFFpD9.s:553    .text:0000000000000250 .L0 
     /tmp/ccEFFpD9.s:554    .text:0000000000000250 .L0 
     /tmp/ccEFFpD9.s:555    .text:0000000000000250 .L0 
     /tmp/ccEFFpD9.s:562    .text:000000000000025c .L0 
     /tmp/ccEFFpD9.s:563    .text:000000000000025c .L0 
GAS LISTING /tmp/ccEFFpD9.s 			page 28


     /tmp/ccEFFpD9.s:569    .text:0000000000000264 .L0 
     /tmp/ccEFFpD9.s:570    .text:0000000000000264 .L0 
     /tmp/ccEFFpD9.s:573    .text:000000000000026c .L0 
     /tmp/ccEFFpD9.s:574    .text:000000000000026c .L0 
     /tmp/ccEFFpD9.s:581    .text:0000000000000274 .L0 
     /tmp/ccEFFpD9.s:586    .text:0000000000000278 .L0 
     /tmp/ccEFFpD9.s:587    .text:0000000000000278 .L0 
     /tmp/ccEFFpD9.s:588    .text:0000000000000278 .L0 
     /tmp/ccEFFpD9.s:589    .text:0000000000000278 .L0 
     /tmp/ccEFFpD9.s:592    .text:0000000000000280 .L0 
     /tmp/ccEFFpD9.s:596    .text:0000000000000284 .L0 
     /tmp/ccEFFpD9.s:598    .text:0000000000000284 .L0 
     /tmp/ccEFFpD9.s:599    .text:0000000000000284 .L0 
     /tmp/ccEFFpD9.s:600    .text:0000000000000284 .L0 
     /tmp/ccEFFpD9.s:603    .text:000000000000028c .L0 
       src/riscv.cpp:80     .text:000000000000028c .L0 
     /tmp/ccEFFpD9.s:610    .text:0000000000000290 .L0 
     /tmp/ccEFFpD9.s:615    .text:0000000000000294 .L0 
     /tmp/ccEFFpD9.s:617    .text:0000000000000294 .L0 
     /tmp/ccEFFpD9.s:618    .text:0000000000000294 .L0 
     /tmp/ccEFFpD9.s:619    .text:0000000000000294 .L0 
       src/riscv.cpp:85     .text:0000000000000294 .L0 
     /tmp/ccEFFpD9.s:626    .text:0000000000000298 .L0 
     /tmp/ccEFFpD9.s:628    .text:0000000000000298 .L0 
     /tmp/ccEFFpD9.s:632    .text:00000000000002a4 .L0 
     /tmp/ccEFFpD9.s:637    .text:00000000000002a8 .L0 
     /tmp/ccEFFpD9.s:639    .text:00000000000002a8 .L0 
     /tmp/ccEFFpD9.s:640    .text:00000000000002a8 .L0 
     /tmp/ccEFFpD9.s:641    .text:00000000000002a8 .L0 
     /tmp/ccEFFpD9.s:642    .text:00000000000002a8 .L0 
       src/riscv.cpp:93     .text:00000000000002a8 .L0 
     /tmp/ccEFFpD9.s:649    .text:00000000000002ac .L0 
       src/riscv.cpp:94     .text:00000000000002ac .L0 
     /tmp/ccEFFpD9.s:655    .text:00000000000002b0 .L0 
     /tmp/ccEFFpD9.s:657    .text:00000000000002b0 .L0 
     /tmp/ccEFFpD9.s:660    .text:00000000000002b8 .L0 
     /tmp/ccEFFpD9.s:661    .text:00000000000002b8 .L0 
     /tmp/ccEFFpD9.s:663    .text:00000000000002bc .L0 
     /tmp/ccEFFpD9.s:664    .text:00000000000002bc .L0 
     /tmp/ccEFFpD9.s:671    .text:00000000000002c4 .L0 
     /tmp/ccEFFpD9.s:676    .text:00000000000002c8 .L0 
     /tmp/ccEFFpD9.s:678    .text:00000000000002c8 .L0 
     /tmp/ccEFFpD9.s:679    .text:00000000000002c8 .L0 
     /tmp/ccEFFpD9.s:680    .text:00000000000002c8 .L0 
     /tmp/ccEFFpD9.s:681    .text:00000000000002c8 .L0 
       src/riscv.cpp:104    .text:00000000000002c8 .L0 
     /tmp/ccEFFpD9.s:688    .text:00000000000002cc .L0 
     /tmp/ccEFFpD9.s:690    .text:00000000000002cc .L0 
     /tmp/ccEFFpD9.s:693    .text:00000000000002d4 .L0 
     /tmp/ccEFFpD9.s:694    .text:00000000000002d4 .L0 
     /tmp/ccEFFpD9.s:701    .text:00000000000002dc .L0 
     /tmp/ccEFFpD9.s:706    .text:00000000000002e0 .L0 
     /tmp/ccEFFpD9.s:708    .text:00000000000002e0 .L0 
     /tmp/ccEFFpD9.s:709    .text:00000000000002e0 .L0 
     /tmp/ccEFFpD9.s:710    .text:00000000000002e0 .L0 
     /tmp/ccEFFpD9.s:711    .text:00000000000002e0 .L0 
       src/riscv.cpp:113    .text:00000000000002e0 .L0 
GAS LISTING /tmp/ccEFFpD9.s 			page 29


     /tmp/ccEFFpD9.s:718    .text:00000000000002e4 .L0 
     /tmp/ccEFFpD9.s:720    .text:00000000000002e4 .L0 
     /tmp/ccEFFpD9.s:723    .text:00000000000002ec .L0 
     /tmp/ccEFFpD9.s:724    .text:00000000000002ec .L0 
     /tmp/ccEFFpD9.s:731    .text:00000000000002f4 .L0 
     /tmp/ccEFFpD9.s:736    .text:00000000000002f8 .L0 
     /tmp/ccEFFpD9.s:738    .text:00000000000002f8 .L0 
     /tmp/ccEFFpD9.s:739    .text:00000000000002f8 .L0 
     /tmp/ccEFFpD9.s:740    .text:00000000000002f8 .L0 
     /tmp/ccEFFpD9.s:741    .text:00000000000002f8 .L0 
       src/riscv.cpp:122    .text:00000000000002f8 .L0 
     /tmp/ccEFFpD9.s:748    .text:00000000000002fc .L0 
     /tmp/ccEFFpD9.s:750    .text:00000000000002fc .L0 
     /tmp/ccEFFpD9.s:753    .text:0000000000000304 .L0 
     /tmp/ccEFFpD9.s:754    .text:0000000000000304 .L0 
     /tmp/ccEFFpD9.s:761    .text:000000000000030c .L0 
     /tmp/ccEFFpD9.s:766    .text:0000000000000310 .L0 
     /tmp/ccEFFpD9.s:768    .text:0000000000000310 .L0 
     /tmp/ccEFFpD9.s:769    .text:0000000000000310 .L0 
     /tmp/ccEFFpD9.s:770    .text:0000000000000310 .L0 
     /tmp/ccEFFpD9.s:771    .text:0000000000000310 .L0 
       src/riscv.cpp:131    .text:0000000000000310 .L0 
     /tmp/ccEFFpD9.s:778    .text:0000000000000314 .L0 
     /tmp/ccEFFpD9.s:780    .text:0000000000000314 .L0 
     /tmp/ccEFFpD9.s:783    .text:000000000000031c .L0 
     /tmp/ccEFFpD9.s:784    .text:000000000000031c .L0 
     /tmp/ccEFFpD9.s:791    .text:0000000000000324 .L0 
     /tmp/ccEFFpD9.s:802    .text:0000000000000328 .L0 
     /tmp/ccEFFpD9.s:803    .text:0000000000000328 .L0 
     /tmp/ccEFFpD9.s:804    .text:0000000000000328 .L0 
     /tmp/ccEFFpD9.s:811    .text:0000000000000330 .L0 
     /tmp/ccEFFpD9.s:818    .text:0000000000000334 .L0 
     /tmp/ccEFFpD9.s:819    .text:0000000000000334 .L0 
     /tmp/ccEFFpD9.s:825    .text:0000000000000340 .L0 
     /tmp/ccEFFpD9.s:834    .text:0000000000000340 .L0 
     /tmp/ccEFFpD9.s:310    .rodata:0000000000000000 .L7
     /tmp/ccEFFpD9.s:302    .text:00000000000001c4 .L0 
     /tmp/ccEFFpD9.s:555    .text:0000000000000250 .L0 
     /tmp/ccEFFpD9.s:245    .text:0000000000000190 .L23
     /tmp/ccEFFpD9.s:793    .text:0000000000000328 .L24
     /tmp/ccEFFpD9.s:813    .text:0000000000000334 .L25
     /tmp/ccEFFpD9.s:445    .text:0000000000000200 .L3
     /tmp/ccEFFpD9.s:411    .text:00000000000001f0 .L5
     /tmp/ccEFFpD9.s:379    .text:00000000000001dc .L18
     /tmp/ccEFFpD9.s:463    .text:0000000000000214 .L17
     /tmp/ccEFFpD9.s:496    .text:0000000000000228 .L16
     /tmp/ccEFFpD9.s:547    .text:0000000000000250 .L15
     /tmp/ccEFFpD9.s:583    .text:0000000000000278 .L14
     /tmp/ccEFFpD9.s:634    .text:00000000000002a8 .L13
     /tmp/ccEFFpD9.s:673    .text:00000000000002c8 .L12
     /tmp/ccEFFpD9.s:703    .text:00000000000002e0 .L11
     /tmp/ccEFFpD9.s:733    .text:00000000000002f8 .L10
     /tmp/ccEFFpD9.s:763    .text:0000000000000310 .L9
     /tmp/ccEFFpD9.s:594    .text:0000000000000284 .L8
     /tmp/ccEFFpD9.s:612    .text:0000000000000294 .L6
     /tmp/ccEFFpD9.s:2512   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccEFFpD9.s:4064   .debug_str:00000000000006c1 .LASF133
GAS LISTING /tmp/ccEFFpD9.s 			page 30


     /tmp/ccEFFpD9.s:4004   .debug_str:0000000000000539 .LASF134
     /tmp/ccEFFpD9.s:3894   .debug_str:0000000000000205 .LASF135
     /tmp/ccEFFpD9.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccEFFpD9.s:828    .text:0000000000000340 .Letext0
     /tmp/ccEFFpD9.s:3814   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccEFFpD9.s:3984   .debug_str:00000000000004c3 .LASF0
     /tmp/ccEFFpD9.s:3998   .debug_str:0000000000000507 .LASF1
     /tmp/ccEFFpD9.s:3964   .debug_str:0000000000000436 .LASF2
     /tmp/ccEFFpD9.s:3928   .debug_str:0000000000000347 .LASF4
     /tmp/ccEFFpD9.s:4040   .debug_str:00000000000005fe .LASF3
     /tmp/ccEFFpD9.s:3832   .debug_str:000000000000005d .LASF5
     /tmp/ccEFFpD9.s:4002   .debug_str:0000000000000526 .LASF6
     /tmp/ccEFFpD9.s:3982   .debug_str:00000000000004b0 .LASF7
     /tmp/ccEFFpD9.s:4080   .debug_str:000000000000081e .LASF8
     /tmp/ccEFFpD9.s:3906   .debug_str:0000000000000274 .LASF9
     /tmp/ccEFFpD9.s:4016   .debug_str:0000000000000575 .LASF10
     /tmp/ccEFFpD9.s:4068   .debug_str:0000000000000799 .LASF11
     /tmp/ccEFFpD9.s:3838   .debug_str:000000000000007c .LASF12
     /tmp/ccEFFpD9.s:3820   .debug_str:0000000000000015 .LASF13
     /tmp/ccEFFpD9.s:3848   .debug_str:00000000000000d6 .LASF14
     /tmp/ccEFFpD9.s:4034   .debug_str:00000000000005d4 .LASF15
     /tmp/ccEFFpD9.s:3864   .debug_str:000000000000011e .LASF16
     /tmp/ccEFFpD9.s:3994   .debug_str:00000000000004f2 .LASF60
     /tmp/ccEFFpD9.s:4038   .debug_str:00000000000005f3 .LASF17
     /tmp/ccEFFpD9.s:4048   .debug_str:0000000000000641 .LASF19
     /tmp/ccEFFpD9.s:4000   .debug_str:000000000000051a .LASF18
     /tmp/ccEFFpD9.s:3822   .debug_str:0000000000000025 .LASF20
     /tmp/ccEFFpD9.s:3840   .debug_str:000000000000008c .LASF21
     /tmp/ccEFFpD9.s:4046   .debug_str:0000000000000629 .LASF22
     /tmp/ccEFFpD9.s:3916   .debug_str:00000000000002dc .LASF23
     /tmp/ccEFFpD9.s:3910   .debug_str:0000000000000298 .LASF25
     /tmp/ccEFFpD9.s:3878   .debug_str:0000000000000195 .LASF27
     /tmp/ccEFFpD9.s:3846   .debug_str:00000000000000bd .LASF29
     /tmp/ccEFFpD9.s:4028   .debug_str:00000000000005ae .LASF24
     /tmp/ccEFFpD9.s:4102   .debug_str:00000000000008cd .LASF26
     /tmp/ccEFFpD9.s:4058   .debug_str:000000000000069d .LASF28
     /tmp/ccEFFpD9.s:4082   .debug_str:000000000000082e .LASF30
     /tmp/ccEFFpD9.s:3986   .debug_str:00000000000004d0 .LASF31
     /tmp/ccEFFpD9.s:4032   .debug_str:00000000000005bc .LASF32
     /tmp/ccEFFpD9.s:4036   .debug_str:00000000000005ea .LASF33
     /tmp/ccEFFpD9.s:3970   .debug_str:0000000000000457 .LASF34
     /tmp/ccEFFpD9.s:3918   .debug_str:00000000000002e7 .LASF35
     /tmp/ccEFFpD9.s:4018   .debug_str:0000000000000584 .LASF36
     /tmp/ccEFFpD9.s:3980   .debug_str:0000000000000498 .LASF37
     /tmp/ccEFFpD9.s:4072   .debug_str:00000000000007c2 .LASF38
     /tmp/ccEFFpD9.s:4070   .debug_str:00000000000007a8 .LASF39
     /tmp/ccEFFpD9.s:3898   .debug_str:0000000000000228 .LASF40
     /tmp/ccEFFpD9.s:3892   .debug_str:00000000000001f1 .LASF41
     /tmp/ccEFFpD9.s:3882   .debug_str:00000000000001ae .LASF42
     /tmp/ccEFFpD9.s:4062   .debug_str:00000000000006ac .LASF43
     /tmp/ccEFFpD9.s:3860   .debug_str:0000000000000109 .LASF44
     /tmp/ccEFFpD9.s:3946   .debug_str:00000000000003d8 .LASF45
     /tmp/ccEFFpD9.s:3834   .debug_str:0000000000000064 .LASF46
     /tmp/ccEFFpD9.s:3996   .debug_str:00000000000004f8 .LASF47
     /tmp/ccEFFpD9.s:3944   .debug_str:00000000000003bc .LASF48
     /tmp/ccEFFpD9.s:4006   .debug_str:0000000000000547 .LASF49
     /tmp/ccEFFpD9.s:3872   .debug_str:0000000000000150 .LASF50
GAS LISTING /tmp/ccEFFpD9.s 			page 31


     /tmp/ccEFFpD9.s:3842   .debug_str:0000000000000097 .LASF51
     /tmp/ccEFFpD9.s:3930   .debug_str:000000000000034e .LASF52
     /tmp/ccEFFpD9.s:4098   .debug_str:00000000000008a9 .LASF53
     /tmp/ccEFFpD9.s:3844   .debug_str:00000000000000a3 .LASF54
     /tmp/ccEFFpD9.s:4044   .debug_str:000000000000061a .LASF55
     /tmp/ccEFFpD9.s:4090   .debug_str:0000000000000872 .LASF56
     /tmp/ccEFFpD9.s:4078   .debug_str:0000000000000809 .LASF136
     /tmp/ccEFFpD9.s:3938   .debug_str:0000000000000389 .LASF137
     /tmp/ccEFFpD9.s:3830   .debug_str:0000000000000055 .LASF78
     /tmp/ccEFFpD9.s:4056   .debug_str:0000000000000698 .LASF57
     /tmp/ccEFFpD9.s:3976   .debug_str:000000000000047f .LASF58
     /tmp/ccEFFpD9.s:3950   .debug_str:00000000000003f3 .LASF59
     /tmp/ccEFFpD9.s:3956   .debug_str:000000000000040c .LASF61
     /tmp/ccEFFpD9.s:3942   .debug_str:00000000000003b2 .LASF62
     /tmp/ccEFFpD9.s:3972   .debug_str:0000000000000460 .LASF63
     /tmp/ccEFFpD9.s:4042   .debug_str:0000000000000610 .LASF69
     /tmp/ccEFFpD9.s:4052   .debug_str:000000000000066d .LASF70
     /tmp/ccEFFpD9.s:4020   .debug_str:000000000000058f .LASF64
     /tmp/ccEFFpD9.s:3904   .debug_str:0000000000000253 .LASF65
     /tmp/ccEFFpD9.s:3926   .debug_str:0000000000000342 .LASF66
     /tmp/ccEFFpD9.s:3932   .debug_str:0000000000000367 .LASF138
     /tmp/ccEFFpD9.s:4030   .debug_str:00000000000005b7 .LASF67
     /tmp/ccEFFpD9.s:3954   .debug_str:0000000000000407 .LASF92
     /tmp/ccEFFpD9.s:3870   .debug_str:000000000000014b .LASF68
     /tmp/ccEFFpD9.s:3880   .debug_str:00000000000001a1 .LASF71
     /tmp/ccEFFpD9.s:3850   .debug_str:00000000000000e2 .LASF72
     /tmp/ccEFFpD9.s:3936   .debug_str:0000000000000371 .LASF73
     /tmp/ccEFFpD9.s:3852   .debug_str:00000000000000eb .LASF74
     /tmp/ccEFFpD9.s:4100   .debug_str:00000000000008b6 .LASF75
     /tmp/ccEFFpD9.s:3862   .debug_str:0000000000000115 .LASF80
     /tmp/ccEFFpD9.s:4050   .debug_str:0000000000000659 .LASF82
     /tmp/ccEFFpD9.s:4088   .debug_str:0000000000000868 .LASF76
     /tmp/ccEFFpD9.s:3974   .debug_str:000000000000046a .LASF77
     /tmp/ccEFFpD9.s:3826   .debug_str:0000000000000048 .LASF79
     /tmp/ccEFFpD9.s:4012   .debug_str:0000000000000562 .LASF81
     /tmp/ccEFFpD9.s:4074   .debug_str:00000000000007cf .LASF83
     /tmp/ccEFFpD9.s:3966   .debug_str:0000000000000444 .LASF84
     /tmp/ccEFFpD9.s:3922   .debug_str:0000000000000303 .LASF85
     /tmp/ccEFFpD9.s:3824   .debug_str:000000000000003e .LASF86
     /tmp/ccEFFpD9.s:3902   .debug_str:000000000000023e .LASF87
     /tmp/ccEFFpD9.s:3958   .debug_str:000000000000041c .LASF88
     /tmp/ccEFFpD9.s:4066   .debug_str:0000000000000785 .LASF89
     /tmp/ccEFFpD9.s:3818   .debug_str:0000000000000008 .LASF90
     /tmp/ccEFFpD9.s:4076   .debug_str:00000000000007e7 .LASF91
     /tmp/ccEFFpD9.s:3896   .debug_str:0000000000000223 .LASF93
     /tmp/ccEFFpD9.s:3886   .debug_str:00000000000001cd .LASF139
     /tmp/ccEFFpD9.s:3948   .debug_str:00000000000003e5 .LASF94
     /tmp/ccEFFpD9.s:3914   .debug_str:00000000000002c3 .LASF95
     /tmp/ccEFFpD9.s:4092   .debug_str:000000000000088e .LASF96
     /tmp/ccEFFpD9.s:3908   .debug_str:0000000000000282 .LASF97
     /tmp/ccEFFpD9.s:4086   .debug_str:0000000000000852 .LASF140
     /tmp/ccEFFpD9.s:4094   .debug_str:0000000000000899 .LASF98
     /tmp/ccEFFpD9.s:3890   .debug_str:00000000000001de .LASF99
     /tmp/ccEFFpD9.s:3934   .debug_str:000000000000036c .LASF100
     /tmp/ccEFFpD9.s:3854   .debug_str:00000000000000f3 .LASF101
     /tmp/ccEFFpD9.s:3988   .debug_str:00000000000004db .LASF102
     /tmp/ccEFFpD9.s:3858   .debug_str:0000000000000102 .LASF103
GAS LISTING /tmp/ccEFFpD9.s 			page 32


     /tmp/ccEFFpD9.s:4024   .debug_str:000000000000059d .LASF104
     /tmp/ccEFFpD9.s:4084   .debug_str:0000000000000844 .LASF141
     /tmp/ccEFFpD9.s:3924   .debug_str:000000000000031a .LASF142
     /tmp/ccEFFpD9.s:3828   .debug_str:0000000000000050 .LASF105
     /tmp/ccEFFpD9.s:4008   .debug_str:0000000000000558 .LASF106
     /tmp/ccEFFpD9.s:3888   .debug_str:00000000000001d5 .LASF107
     /tmp/ccEFFpD9.s:3912   .debug_str:00000000000002b0 .LASF108
     /tmp/ccEFFpD9.s:4054   .debug_str:000000000000068e .LASF109
     /tmp/ccEFFpD9.s:3978   .debug_str:0000000000000484 .LASF110
     /tmp/ccEFFpD9.s:3856   .debug_str:00000000000000f9 .LASF111
     /tmp/ccEFFpD9.s:3920   .debug_str:00000000000002f0 .LASF112
     /tmp/ccEFFpD9.s:3868   .debug_str:0000000000000140 .LASF113
     /tmp/ccEFFpD9.s:3884   .debug_str:00000000000001b7 .LASF114
     /tmp/ccEFFpD9.s:3952   .debug_str:00000000000003fb .LASF115
     /tmp/ccEFFpD9.s:3874   .debug_str:000000000000016e .LASF116
     /tmp/ccEFFpD9.s:3816   .debug_str:0000000000000000 .LASF117
     /tmp/ccEFFpD9.s:3866   .debug_str:0000000000000134 .LASF143
     /tmp/ccEFFpD9.s:62     .text:0000000000000028 .LFB31
     /tmp/ccEFFpD9.s:826    .text:0000000000000340 .LFE31
     /tmp/ccEFFpD9.s:4096   .debug_str:00000000000008a2 .LASF118
     /tmp/ccEFFpD9.s:3478   .debug_loc:0000000000000000 .LLST1
     /tmp/ccEFFpD9.s:3806   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccEFFpD9.s:3990   .debug_str:00000000000004e3 .LASF119
     /tmp/ccEFFpD9.s:4026   .debug_str:00000000000005a6 .LASF120
     /tmp/ccEFFpD9.s:3836   .debug_str:0000000000000070 .LASF121
     /tmp/ccEFFpD9.s:3543   .debug_loc:000000000000012f .LLST4
     /tmp/ccEFFpD9.s:384    .text:00000000000001dc .LBB55
     /tmp/ccEFFpD9.s:412    .text:00000000000001f0 .LBE55
     /tmp/ccEFFpD9.s:3550   .debug_loc:0000000000000152 .LLST5
     /tmp/ccEFFpD9.s:3565   .debug_loc:000000000000018c .LLST6
     /tmp/ccEFFpD9.s:401    .text:00000000000001ec .LVL31
     /tmp/ccEFFpD9.s:471    .text:0000000000000214 .LBB56
     /tmp/ccEFFpD9.s:497    .text:0000000000000228 .LBE56
     /tmp/ccEFFpD9.s:3572   .debug_loc:00000000000001af .LLST7
     /tmp/ccEFFpD9.s:3579   .debug_loc:00000000000001d2 .LLST8
     /tmp/ccEFFpD9.s:485    .text:0000000000000220 .LVL39
     /tmp/ccEFFpD9.s:500    .text:0000000000000228 .LBB57
     /tmp/ccEFFpD9.s:548    .text:0000000000000250 .LBE57
     /tmp/ccEFFpD9.s:3968   .debug_str:0000000000000450 .LASF122
     /tmp/ccEFFpD9.s:3586   .debug_loc:00000000000001f5 .LLST9
     /tmp/ccEFFpD9.s:3900   .debug_str:0000000000000230 .LASF123
     /tmp/ccEFFpD9.s:3593   .debug_loc:0000000000000218 .LLST10
     /tmp/ccEFFpD9.s:3600   .debug_loc:000000000000023b .LLST11
     /tmp/ccEFFpD9.s:4104   .debug_str:00000000000008e2 .LASF124
     /tmp/ccEFFpD9.s:3607   .debug_loc:000000000000025e .LLST12
     /tmp/ccEFFpD9.s:3614   .debug_loc:0000000000000281 .LLST13
     /tmp/ccEFFpD9.s:3992   .debug_str:00000000000004e8 .LASF125
     /tmp/ccEFFpD9.s:3622   .debug_loc:00000000000002a5 .LLST14
     /tmp/ccEFFpD9.s:532    .text:0000000000000240 .LVL45
     /tmp/ccEFFpD9.s:551    .text:0000000000000250 .LBB58
     /tmp/ccEFFpD9.s:584    .text:0000000000000278 .LBE58
     /tmp/ccEFFpD9.s:3629   .debug_loc:00000000000002c8 .LLST15
     /tmp/ccEFFpD9.s:558    .text:000000000000025c .LBB59
     /tmp/ccEFFpD9.s:567    .text:0000000000000264 .LBE59
     /tmp/ccEFFpD9.s:3637   .debug_loc:00000000000002ec .LLST16
     /tmp/ccEFFpD9.s:3645   .debug_loc:0000000000000310 .LLST17
     /tmp/ccEFFpD9.s:571    .text:000000000000026c .LVL49
GAS LISTING /tmp/ccEFFpD9.s 			page 33


     /tmp/ccEFFpD9.s:597    .text:0000000000000284 .LBB61
     /tmp/ccEFFpD9.s:613    .text:0000000000000294 .LBE61
     /tmp/ccEFFpD9.s:3652   .debug_loc:0000000000000333 .LLST18
     /tmp/ccEFFpD9.s:601    .text:000000000000028c .LVL53
     /tmp/ccEFFpD9.s:616    .text:0000000000000294 .LBB62
     /tmp/ccEFFpD9.s:635    .text:00000000000002a8 .LBE62
     /tmp/ccEFFpD9.s:3659   .debug_loc:0000000000000356 .LLST19
     /tmp/ccEFFpD9.s:630    .text:00000000000002a4 .LVL56
     /tmp/ccEFFpD9.s:638    .text:00000000000002a8 .LBB63
     /tmp/ccEFFpD9.s:674    .text:00000000000002c8 .LBE63
     /tmp/ccEFFpD9.s:3666   .debug_loc:0000000000000379 .LLST20
     /tmp/ccEFFpD9.s:4010   .debug_str:000000000000055d .LASF126
     /tmp/ccEFFpD9.s:3673   .debug_loc:000000000000039c .LLST21
     /tmp/ccEFFpD9.s:3680   .debug_loc:00000000000003bf .LLST22
     /tmp/ccEFFpD9.s:3940   .debug_str:00000000000003ab .LASF127
     /tmp/ccEFFpD9.s:3688   .debug_loc:00000000000003e3 .LLST23
     /tmp/ccEFFpD9.s:658    .text:00000000000002b8 .LVL60
     /tmp/ccEFFpD9.s:677    .text:00000000000002c8 .LBB64
     /tmp/ccEFFpD9.s:704    .text:00000000000002e0 .LBE64
     /tmp/ccEFFpD9.s:3695   .debug_loc:0000000000000406 .LLST24
     /tmp/ccEFFpD9.s:3702   .debug_loc:0000000000000429 .LLST25
     /tmp/ccEFFpD9.s:691    .text:00000000000002d4 .LVL63
     /tmp/ccEFFpD9.s:707    .text:00000000000002e0 .LBB65
     /tmp/ccEFFpD9.s:734    .text:00000000000002f8 .LBE65
     /tmp/ccEFFpD9.s:3710   .debug_loc:000000000000044d .LLST26
     /tmp/ccEFFpD9.s:3717   .debug_loc:0000000000000470 .LLST27
     /tmp/ccEFFpD9.s:721    .text:00000000000002ec .LVL66
     /tmp/ccEFFpD9.s:737    .text:00000000000002f8 .LBB66
     /tmp/ccEFFpD9.s:764    .text:0000000000000310 .LBE66
     /tmp/ccEFFpD9.s:3725   .debug_loc:0000000000000494 .LLST28
     /tmp/ccEFFpD9.s:3732   .debug_loc:00000000000004b7 .LLST29
     /tmp/ccEFFpD9.s:751    .text:0000000000000304 .LVL69
     /tmp/ccEFFpD9.s:767    .text:0000000000000310 .LBB67
     /tmp/ccEFFpD9.s:794    .text:0000000000000328 .LBE67
     /tmp/ccEFFpD9.s:3740   .debug_loc:00000000000004db .LLST30
     /tmp/ccEFFpD9.s:3747   .debug_loc:00000000000004fe .LLST31
     /tmp/ccEFFpD9.s:781    .text:000000000000031c .LVL72
     /tmp/ccEFFpD9.s:249    .text:0000000000000190 .LBB49
     /tmp/ccEFFpD9.s:264    .text:000000000000019c .LBE49
     /tmp/ccEFFpD9.s:270    .text:00000000000001a4 .LBB51
     /tmp/ccEFFpD9.s:285    .text:00000000000001b0 .LBE51
     /tmp/ccEFFpD9.s:419    .text:00000000000001f4 .LBB69
     /tmp/ccEFFpD9.s:430    .text:00000000000001f8 .LBE69
     /tmp/ccEFFpD9.s:3755   .debug_loc:0000000000000522 .LLST32
     /tmp/ccEFFpD9.s:435    .text:00000000000001fc .LBB71
     /tmp/ccEFFpD9.s:447    .text:0000000000000200 .LBE71
     /tmp/ccEFFpD9.s:3762   .debug_loc:0000000000000545 .LLST33
     /tmp/ccEFFpD9.s:590    .text:0000000000000280 .LVL51
     /tmp/ccEFFpD9.s:118    .text:0000000000000074 .LBB43
     /tmp/ccEFFpD9.s:238    .text:000000000000018c .LBE43
     /tmp/ccEFFpD9.s:3960   .debug_str:0000000000000426 .LASF128
     /tmp/ccEFFpD9.s:3769   .debug_loc:0000000000000568 .LLST2
     /tmp/ccEFFpD9.s:131    .text:000000000000008c .LVL5
     /tmp/ccEFFpD9.s:136    .text:0000000000000098 .LVL6
     /tmp/ccEFFpD9.s:141    .text:00000000000000a4 .LVL7
     /tmp/ccEFFpD9.s:146    .text:00000000000000b0 .LVL8
     /tmp/ccEFFpD9.s:151    .text:00000000000000bc .LVL9
GAS LISTING /tmp/ccEFFpD9.s 			page 34


     /tmp/ccEFFpD9.s:156    .text:00000000000000c8 .LVL10
     /tmp/ccEFFpD9.s:161    .text:00000000000000d4 .LVL11
     /tmp/ccEFFpD9.s:166    .text:00000000000000e0 .LVL12
     /tmp/ccEFFpD9.s:171    .text:00000000000000ec .LVL13
     /tmp/ccEFFpD9.s:176    .text:00000000000000f8 .LVL14
     /tmp/ccEFFpD9.s:181    .text:0000000000000104 .LVL15
     /tmp/ccEFFpD9.s:186    .text:0000000000000110 .LVL16
     /tmp/ccEFFpD9.s:191    .text:000000000000011c .LVL17
     /tmp/ccEFFpD9.s:196    .text:0000000000000128 .LVL18
     /tmp/ccEFFpD9.s:201    .text:0000000000000134 .LVL19
     /tmp/ccEFFpD9.s:206    .text:0000000000000140 .LVL20
     /tmp/ccEFFpD9.s:211    .text:000000000000014c .LVL21
     /tmp/ccEFFpD9.s:216    .text:0000000000000158 .LVL22
     /tmp/ccEFFpD9.s:221    .text:0000000000000164 .LVL23
     /tmp/ccEFFpD9.s:226    .text:0000000000000170 .LVL24
     /tmp/ccEFFpD9.s:231    .text:000000000000017c .LVL25
     /tmp/ccEFFpD9.s:76     .text:000000000000003c .LBB38
     /tmp/ccEFFpD9.s:92     .text:0000000000000048 .LBE38
     /tmp/ccEFFpD9.s:800    .text:0000000000000328 .LBB44
     /tmp/ccEFFpD9.s:815    .text:0000000000000334 .LBE44
     /tmp/ccEFFpD9.s:3776   .debug_loc:000000000000058b .LLST3
     /tmp/ccEFFpD9.s:820    .text:000000000000033c .LVL75
     /tmp/ccEFFpD9.s:10     .text:0000000000000000 .LFB30
     /tmp/ccEFFpD9.s:56     .text:0000000000000028 .LFE30
     /tmp/ccEFFpD9.s:22     .text:000000000000000c .LBB36
     /tmp/ccEFFpD9.s:35     .text:0000000000000014 .LBE36
     /tmp/ccEFFpD9.s:3784   .debug_loc:00000000000005af .LLST0
     /tmp/ccEFFpD9.s:4022   .debug_str:0000000000000598 .LASF144
     /tmp/ccEFFpD9.s:4060   .debug_str:00000000000006a7 .LASF129
     /tmp/ccEFFpD9.s:3962   .debug_str:000000000000042f .LASF130
     /tmp/ccEFFpD9.s:4014   .debug_str:000000000000056e .LASF131
     /tmp/ccEFFpD9.s:3876   .debug_str:0000000000000185 .LASF132
     /tmp/ccEFFpD9.s:90     .text:0000000000000048 .LVL2
     /tmp/ccEFFpD9.s:129    .text:0000000000000084 .LVL4
     /tmp/ccEFFpD9.s:244    .text:0000000000000190 .LVL26
     /tmp/ccEFFpD9.s:393    .text:00000000000001e0 .LVL29
     /tmp/ccEFFpD9.s:462    .text:0000000000000214 .LVL37
     /tmp/ccEFFpD9.s:480    .text:0000000000000218 .LVL38
     /tmp/ccEFFpD9.s:495    .text:0000000000000228 .LVL40
     /tmp/ccEFFpD9.s:515    .text:0000000000000230 .LVL42
     /tmp/ccEFFpD9.s:546    .text:0000000000000250 .LVL46
     /tmp/ccEFFpD9.s:582    .text:0000000000000278 .LVL50
     /tmp/ccEFFpD9.s:593    .text:0000000000000284 .LVL52
     /tmp/ccEFFpD9.s:611    .text:0000000000000294 .LVL54
     /tmp/ccEFFpD9.s:624    .text:0000000000000298 .LVL55
     /tmp/ccEFFpD9.s:633    .text:00000000000002a8 .LVL57
     /tmp/ccEFFpD9.s:653    .text:00000000000002b0 .LVL59
     /tmp/ccEFFpD9.s:672    .text:00000000000002c8 .LVL61
     /tmp/ccEFFpD9.s:686    .text:00000000000002cc .LVL62
     /tmp/ccEFFpD9.s:702    .text:00000000000002e0 .LVL64
     /tmp/ccEFFpD9.s:716    .text:00000000000002e4 .LVL65
     /tmp/ccEFFpD9.s:732    .text:00000000000002f8 .LVL67
     /tmp/ccEFFpD9.s:746    .text:00000000000002fc .LVL68
     /tmp/ccEFFpD9.s:762    .text:0000000000000310 .LVL70
     /tmp/ccEFFpD9.s:776    .text:0000000000000314 .LVL71
     /tmp/ccEFFpD9.s:792    .text:0000000000000328 .LVL73
     /tmp/ccEFFpD9.s:295    .text:00000000000001b8 .LVL27
GAS LISTING /tmp/ccEFFpD9.s 			page 35


     /tmp/ccEFFpD9.s:301    .text:00000000000001c4 .LVL28
     /tmp/ccEFFpD9.s:399    .text:00000000000001e4 .LVL30
     /tmp/ccEFFpD9.s:409    .text:00000000000001f0 .LVL32
     /tmp/ccEFFpD9.s:509    .text:000000000000022c .LVL41
     /tmp/ccEFFpD9.s:521    .text:0000000000000234 .LVL43
     /tmp/ccEFFpD9.s:527    .text:0000000000000238 .LVL44
     /tmp/ccEFFpD9.s:557    .text:000000000000025c .LVL47
     /tmp/ccEFFpD9.s:565    .text:0000000000000264 .LVL48
     /tmp/ccEFFpD9.s:647    .text:00000000000002ac .LVL58
     /tmp/ccEFFpD9.s:418    .text:00000000000001f4 .LVL33
     /tmp/ccEFFpD9.s:427    .text:00000000000001f8 .LVL34
     /tmp/ccEFFpD9.s:434    .text:00000000000001fc .LVL35
     /tmp/ccEFFpD9.s:443    .text:0000000000000200 .LVL36
     /tmp/ccEFFpD9.s:125    .text:0000000000000080 .LVL3
     /tmp/ccEFFpD9.s:812    .text:0000000000000334 .LVL74
     /tmp/ccEFFpD9.s:21     .text:000000000000000c .LVL0
     /tmp/ccEFFpD9.s:32     .text:0000000000000014 .LVL1
     /tmp/ccEFFpD9.s:835    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccEFFpD9.s:247    .text:0000000000000190 .LBB48
     /tmp/ccEFFpD9.s:448    .text:0000000000000200 .LBE48
     /tmp/ccEFFpD9.s:466    .text:0000000000000214 .LBB74
     /tmp/ccEFFpD9.s:797    .text:0000000000000328 .LBE74

UNDEFINED SYMBOLS
__putc
_ZN15MemoryAllocator9mem_allocEm
_ZN15MemoryAllocator8mem_freeEPv
_ZN3TCB12createThreadEPFvPvES0_Pc
_ZN3TCB7runningE
_ZN3TCB8dispatchEv
__getc
_ZN3Sem8sem_openEm
_ZN3Sem9sem_closeEv
_ZN3Sem8sem_waitEv
_ZN3Sem10sem_signalEv
_ZN3Sem11sem_trywaitEv
console_handler
